/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../build/common/area-tooltip.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from '@angular/core/src/animation/animation_transition';
import * as import10 from '@angular/core/src/animation/animation_sequence_player';
import * as import11 from '@angular/core/src/animation/animation_styles';
import * as import12 from '@angular/core/src/animation/animation_style_util';
import * as import13 from '@angular/core/src/animation/animation_keyframe';
import * as import14 from '@angular/core/src/animation/animation_player';
import * as import15 from '@angular/core/src/linker/view_container';
import * as import16 from '@angular/core/src/security';
import * as import17 from '../../node_modules/@angular/common/src/directives/ng_for.ngfactory';
import * as import18 from '@angular/core/src/linker/template_ref';
import * as import19 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import20 from '@angular/common/src/directives/ng_for';
import * as import21 from './tooltip/tooltip.directive.ngfactory';
import * as import22 from '../../../build/common/tooltip/tooltip.service';
import * as import23 from '@angular/core/src/linker/element_ref';
import * as import24 from '@angular/core/src/zone/ng_zone';
import * as import25 from '../../../build/common/tooltip/tooltip.directive';
import * as import26 from '@angular/core/src/linker/query_list';
export class Wrapper_AreaTooltip {
  /*private*/ _eventHandler:Function;
  context:import0.AreaTooltip;
  /*private*/ _changed:boolean;
  /*private*/ _changes:{[key: string]:any};
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  subscription0:any;
  constructor(p0:any) {
    this._changed = false;
    this._changes = {};
    this.context = new import0.AreaTooltip(p0);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
    this._expr_4 = import1.UNINITIALIZED;
    this._expr_5 = import1.UNINITIALIZED;
    this._expr_6 = import1.UNINITIALIZED;
    this._expr_7 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
  }
  check_xSet(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.xSet = currValue;
      this._changes['xSet'] = new import1.SimpleChange(this._expr_0,currValue);
      this._expr_0 = currValue;
    }
  }
  check_xScale(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.xScale = currValue;
      this._changes['xScale'] = new import1.SimpleChange(this._expr_1,currValue);
      this._expr_1 = currValue;
    }
  }
  check_yScale(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.yScale = currValue;
      this._changes['yScale'] = new import1.SimpleChange(this._expr_2,currValue);
      this._expr_2 = currValue;
    }
  }
  check_results(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.results = currValue;
      this._changes['results'] = new import1.SimpleChange(this._expr_3,currValue);
      this._expr_3 = currValue;
    }
  }
  check_height(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.height = currValue;
      this._changes['height'] = new import1.SimpleChange(this._expr_4,currValue);
      this._expr_4 = currValue;
    }
  }
  check_colors(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this._changed = true;
      this.context.colors = currValue;
      this._changes['colors'] = new import1.SimpleChange(this._expr_5,currValue);
      this._expr_5 = currValue;
    }
  }
  check_showPercentage(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_6,currValue))) {
      this._changed = true;
      this.context.showPercentage = currValue;
      this._changes['showPercentage'] = new import1.SimpleChange(this._expr_6,currValue);
      this._expr_6 = currValue;
    }
  }
  check_tooltipDisabled(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_7,currValue))) {
      this._changed = true;
      this.context.tooltipDisabled = currValue;
      this._changes['tooltipDisabled'] = new import1.SimpleChange(this._expr_7,currValue);
      this._expr_7 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if (changed) {
      this.context.ngOnChanges(this._changes);
      this._changes = {};
    } }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.hover.subscribe(_eventHandler.bind(view,'hover'))); }
  }
}
var renderType_AreaTooltip_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_AreaTooltip_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.AreaTooltip>;
  _AreaTooltip_0_3:Wrapper_AreaTooltip;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_AreaTooltip_Host0,renderType_AreaTooltip_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'g',new import3.InlineArray2(2,'ngx-charts-area-tooltip',''),rootSelector,(null as any));
    this.compView_0 = new View_AreaTooltip0(this.viewUtils,this,0,this._el_0);
    this._AreaTooltip_0_3 = new Wrapper_AreaTooltip(this.renderer);
    this.compView_0.create(this._AreaTooltip_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._AreaTooltip_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.AreaTooltip) && (0 === requestNodeIndex))) { return this._AreaTooltip_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (this._AreaTooltip_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._AreaTooltip_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const AreaTooltipNgFactory:import8.ComponentFactory<import0.AreaTooltip> = new import8.ComponentFactory<import0.AreaTooltip>('g[ngx-charts-area-tooltip]',View_AreaTooltip_Host0,import0.AreaTooltip);
const styles_AreaTooltip:any[] = ([] as any[]);
var AreaTooltip_animationState_states:any = {
  '*': {},
  'inactive': {},
  'active': {}
}
;
function AreaTooltip_animationState_factory(view:import2.AppView<any>,element:any,currentState:any,nextState:any):import9.AnimationTransition {
  var previousPlayers:any = view.animationContext.getAnimationPlayers(element,((nextState == 'void')? (null as any): 'animationState'));
  var collectedStyles:any = {};
  var player:any = (null as any);
  var totalTime:any = 0;
  var defaultStateStyles:any = AreaTooltip_animationState_states['*'];
  var startStateStyles:any = AreaTooltip_animationState_states[currentState];
  if ((startStateStyles == (null as any))) { (startStateStyles = defaultStateStyles); }
  var endStateStyles:any = AreaTooltip_animationState_states[nextState];
  if ((endStateStyles == (null as any))) { (endStateStyles = defaultStateStyles); }
  if (((player == (null as any)) && ((currentState == 'inactive') && (nextState == 'active')))) {
      player = new import10.AnimationSequencePlayer([view.renderer.animate(element,new import11.AnimationStyles(import12.collectAndResolveStyles(collectedStyles,[
        startStateStyles,
        {'opacity': '0'}
      ]
      )),[
        new import13.AnimationKeyframe(0,new import11.AnimationStyles(import12.collectAndResolveStyles(collectedStyles,[{'opacity': '0'}]))),
        new import13.AnimationKeyframe(1,new import11.AnimationStyles(import12.collectAndResolveStyles(collectedStyles,[{'opacity': '0.7'}])))
      ]
    ,250,0,(null as any),previousPlayers)]);
    totalTime = 250;
  }
  if (((player == (null as any)) && ((currentState == 'active') && (nextState == 'inactive')))) {
      player = new import10.AnimationSequencePlayer([view.renderer.animate(element,new import11.AnimationStyles(import12.collectAndResolveStyles(collectedStyles,[
        startStateStyles,
        {'opacity': '0.7'}
      ]
      )),[
        new import13.AnimationKeyframe(0,new import11.AnimationStyles(import12.collectAndResolveStyles(collectedStyles,[{'opacity': '0.7'}]))),
        new import13.AnimationKeyframe(1,new import11.AnimationStyles(import12.collectAndResolveStyles(collectedStyles,[{'opacity': '0'}])))
      ]
    ,250,0,(null as any),previousPlayers)]);
    totalTime = 250;
  }
  if ((player == (null as any))) { (player = new import14.NoOpAnimationPlayer()); }
  player.onDone(():void => {
    player.destroy();
    import12.renderStyles(element,view.renderer,import12.prepareFinalAnimationStyles(startStateStyles,endStateStyles));
  });
  new import10.AnimationSequencePlayer(previousPlayers).destroy();
  import12.renderStyles(element,view.renderer,import12.clearStyles(startStateStyles));
  view.animationContext.queueAnimation(element,'animationState',player);
  return new import9.AnimationTransition(player,currentState,nextState,totalTime);
}
class View_AreaTooltip3 extends import2.AppView<any> {
  _el_0:any;
  _text_1:any;
  _el_2:any;
  _text_3:any;
  _text_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import15.ViewContainer) {
    super(View_AreaTooltip3,renderType_AreaTooltip,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
    this._expr_5 = import1.UNINITIALIZED;
    this._expr_6 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),':xhtml:div',new import3.InlineArray2(2,'class','tooltip-item'),(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'\n            ',(null as any));
    this._el_2 = import3.createRenderElement(this.renderer,this._el_0,':xhtml:span',new import3.InlineArray2(2,'class','tooltip-item-color'),(null as any));
    this._text_3 = this.renderer.createText(this._el_2,'\n            ',(null as any));
    this._text_4 = this.renderer.createText(this._el_0,'',(null as any));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3,
      this._text_4
    ]
    ),(null as any));
    return (null as any);
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_5:any = this.context.$implicit.color;
    if (import3.checkBinding(throwOnChange,this._expr_5,currVal_5)) {
      this.renderer.setElementStyle(this._el_2,'background-color',((this.viewUtils.sanitizer.sanitize(import16.SecurityContext.STYLE,currVal_5) == null)? (null as any): this.viewUtils.sanitizer.sanitize(import16.SecurityContext.STYLE,currVal_5).toString()));
      this._expr_5 = currVal_5;
    }
    const currVal_6:any = import3.inlineInterpolate(1,'\n            ',this.parentView.parentView.parentView.context.getToolTipText(this.context.$implicit),'\n          ');
    if (import3.checkBinding(throwOnChange,this._expr_6,currVal_6)) {
      this.renderer.setText(this._text_4,currVal_6);
      this._expr_6 = currVal_6;
    }
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
class View_AreaTooltip2 extends import2.AppView<any> {
  _text_0:any;
  _el_1:any;
  _text_2:any;
  _anchor_3:any;
  /*private*/ _vc_3:import15.ViewContainer;
  _TemplateRef_3_5:any;
  _NgFor_3_6:import17.Wrapper_NgFor;
  _text_4:any;
  _text_5:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import15.ViewContainer) {
    super(View_AreaTooltip2,renderType_AreaTooltip,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._text_0 = this.renderer.createText((null as any),'\n        ',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,(null as any),':xhtml:div',new import3.InlineArray2(2,'class','area-tooltip-container'),(null as any));
    this._text_2 = this.renderer.createText(this._el_1,'\n          ',(null as any));
    this._anchor_3 = this.renderer.createTemplateAnchor(this._el_1,(null as any));
    this._vc_3 = new import15.ViewContainer(3,1,this,this._anchor_3);
    this._TemplateRef_3_5 = new import18.TemplateRef_(this,3,this._anchor_3);
    this._NgFor_3_6 = new import17.Wrapper_NgFor(this._vc_3.vcRef,this._TemplateRef_3_5,this.parentView.parentView.injectorGet(import19.IterableDiffers,this.parentView.parentIndex),this.parentView.parentView.ref);
    this._text_4 = this.renderer.createText(this._el_1,'\n        ',(null as any));
    this._text_5 = this.renderer.createText((null as any),'\n      ',(null as any));
    this.init(this._text_5,((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._anchor_3,
      this._text_4,
      this._text_5
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import18.TemplateRef) && (3 === requestNodeIndex))) { return this._TemplateRef_3_5; }
    if (((token === import20.NgFor) && (3 === requestNodeIndex))) { return this._NgFor_3_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_3_0_0:any = this.parentView.context.$implicit.values;
    this._NgFor_3_6.check_ngForOf(currVal_3_0_0,throwOnChange,false);
    this._NgFor_3_6.ngDoCheck(this,this._anchor_3,throwOnChange);
    this._vc_3.detectChangesInNestedViews(throwOnChange);
  }
  destroyInternal():void {
    this._vc_3.destroyNestedViews();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._text_0,ctx);
    cb(this._el_1,ctx);
    cb(this._text_5,ctx);
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 3)) { return new View_AreaTooltip3(this.viewUtils,this,3,this._anchor_3,this._vc_3); }
    return (null as any);
  }
}
class View_AreaTooltip1 extends import2.AppView<any> {
  _el_0:any;
  _text_1:any;
  _el_2:any;
  _text_3:any;
  _anchor_4:any;
  /*private*/ _vc_4:import15.ViewContainer;
  _TemplateRef_4_4:any;
  _text_5:any;
  _el_6:any;
  /*private*/ _vc_6:import15.ViewContainer;
  _TooltipDirective_6_5:import21.Wrapper_TooltipDirective;
  _text_7:any;
  /*private*/ _expr_12:any;
  /*private*/ _expr_13:any;
  /*private*/ _expr_14:any;
  /*private*/ _expr_15:any;
  /*private*/ _expr_16:any;
  /*private*/ _expr_17:any;
  /*private*/ _expr_18:any;
  /*private*/ _expr_19:any;
  /*private*/ _expr_20:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import15.ViewContainer) {
    super(View_AreaTooltip1,renderType_AreaTooltip,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
    this._expr_12 = import1.UNINITIALIZED;
    this._expr_13 = import1.UNINITIALIZED;
    this._expr_14 = import1.UNINITIALIZED;
    this._expr_15 = import1.UNINITIALIZED;
    this._expr_16 = import1.UNINITIALIZED;
    this._expr_17 = import1.UNINITIALIZED;
    this._expr_18 = import1.UNINITIALIZED;
    this._expr_19 = import1.UNINITIALIZED;
    this._expr_20 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),':svg:g',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'\n      ',(null as any));
    this._el_2 = import3.createRenderElement(this.renderer,this._el_0,':svg:rect',new import3.InlineArray8(6,'class','tooltip-area','style','opacity: 0; cursor: \'auto\';','y','0'),(null as any));
    this._text_3 = this.renderer.createText(this._el_0,'\n      ',(null as any));
    this._anchor_4 = this.renderer.createTemplateAnchor(this._el_0,(null as any));
    this._vc_4 = new import15.ViewContainer(4,0,this,this._anchor_4);
    this._TemplateRef_4_4 = new import18.TemplateRef_(this,4,this._anchor_4);
    this._text_5 = this.renderer.createText(this._el_0,'\n      ',(null as any));
    this._el_6 = import3.createRenderElement(this.renderer,this._el_0,':svg:rect',new import3.InlineArray8(6,'class','tooltip-anchor','ngx-tooltip','','y','0'),(null as any));
    this._vc_6 = new import15.ViewContainer(6,0,this,this._el_6);
    this._TooltipDirective_6_5 = new import21.Wrapper_TooltipDirective(this.parentView.injectorGet(import22.TooltipService,this.parentIndex),this._vc_6.vcRef,this.renderer,new import23.ElementRef(this._el_6),this.parentView.injectorGet(import24.NgZone,this.parentIndex));
    this._text_7 = this.renderer.createText(this._el_0,'\n    ',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_2,new import3.InlineArray4(4,'mouseenter',(null as any),'mouseleave',(null as any)),this.eventHandler(this.handleEvent_2));
    var disposable_1:Function = import3.subscribeToRenderElement(this,this._el_6,new import3.InlineArray16(10,'focusin',(null as any),'blur',(null as any),'mouseenter',(null as any),'mouseleave',(null as any),'click',(null as any)),this.eventHandler(this.handleEvent_6));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3,
      this._anchor_4,
      this._text_5,
      this._el_6,
      this._text_7
    ]
    ),[
      disposable_0,
      disposable_1
    ]
    );
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import18.TemplateRef) && (4 === requestNodeIndex))) { return this._TemplateRef_4_4; }
    if (((token === import25.TooltipDirective) && (6 === requestNodeIndex))) { return this._TooltipDirective_6_5.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_15:any = ((this.parentView.context.anchorOpacity[this.context.index] !== 0)? 'active': 'inactive');
    if (import3.checkBinding(throwOnChange,this._expr_15,currVal_15)) {
      var animationTransition_animationState:any = this.componentType.animations['animationState'](this,this._el_6,((this._expr_15 == import1.UNINITIALIZED)? 'void': this._expr_15),((currVal_15 == import1.UNINITIALIZED)? 'void': currVal_15));
      this._expr_15 = currVal_15;
    }
    const currVal_6_0_0:any = 15;
    this._TooltipDirective_6_5.check_tooltipSpacing(currVal_6_0_0,throwOnChange,false);
    const currVal_6_0_1:any = this.parentView.context.tooltipDisabled;
    this._TooltipDirective_6_5.check_tooltipDisabled(currVal_6_0_1,throwOnChange,false);
    const currVal_6_0_2:any = 'right';
    this._TooltipDirective_6_5.check_tooltipPlacement(currVal_6_0_2,throwOnChange,false);
    const currVal_6_0_3:any = 'tooltip';
    this._TooltipDirective_6_5.check_tooltipType(currVal_6_0_3,throwOnChange,false);
    const currVal_6_0_4:any = this._TemplateRef_4_4;
    this._TooltipDirective_6_5.check_tooltipTemplate(currVal_6_0_4,throwOnChange,false);
    this._TooltipDirective_6_5.ngDoCheck(this,this._el_6,throwOnChange);
    this._vc_4.detectChangesInNestedViews(throwOnChange);
    this._vc_6.detectChangesInNestedViews(throwOnChange);
    const currVal_12:any = this.context.$implicit.x0;
    if (import3.checkBinding(throwOnChange,this._expr_12,currVal_12)) {
      this.renderer.setElementAttribute(this._el_2,'x',((currVal_12 == null)? (null as any): currVal_12.toString()));
      this._expr_12 = currVal_12;
    }
    const currVal_13:any = this.context.$implicit.width;
    if (import3.checkBinding(throwOnChange,this._expr_13,currVal_13)) {
      this.renderer.setElementAttribute(this._el_2,'width',((currVal_13 == null)? (null as any): currVal_13.toString()));
      this._expr_13 = currVal_13;
    }
    const currVal_14:any = this.parentView.context.height;
    if (import3.checkBinding(throwOnChange,this._expr_14,currVal_14)) {
      this.renderer.setElementAttribute(this._el_2,'height',((currVal_14 == null)? (null as any): currVal_14.toString()));
      this._expr_14 = currVal_14;
    }
    const currVal_16:any = this.context.$implicit.tooltipAnchor;
    if (import3.checkBinding(throwOnChange,this._expr_16,currVal_16)) {
      this.renderer.setElementAttribute(this._el_6,'x',((currVal_16 == null)? (null as any): currVal_16.toString()));
      this._expr_16 = currVal_16;
    }
    const currVal_17:any = 1;
    if (import3.checkBinding(throwOnChange,this._expr_17,currVal_17)) {
      this.renderer.setElementAttribute(this._el_6,'width',((currVal_17 == null)? (null as any): currVal_17.toString()));
      this._expr_17 = currVal_17;
    }
    const currVal_18:any = this.parentView.context.height;
    if (import3.checkBinding(throwOnChange,this._expr_18,currVal_18)) {
      this.renderer.setElementAttribute(this._el_6,'height',((currVal_18 == null)? (null as any): currVal_18.toString()));
      this._expr_18 = currVal_18;
    }
    const currVal_19:any = this.parentView.context.anchorOpacity[this.context.index];
    if (import3.checkBinding(throwOnChange,this._expr_19,currVal_19)) {
      this.renderer.setElementStyle(this._el_6,'opacity',((this.viewUtils.sanitizer.sanitize(import16.SecurityContext.STYLE,currVal_19) == null)? (null as any): this.viewUtils.sanitizer.sanitize(import16.SecurityContext.STYLE,currVal_19).toString()));
      this._expr_19 = currVal_19;
    }
    const currVal_20:any = 'none';
    if (import3.checkBinding(throwOnChange,this._expr_20,currVal_20)) {
      this.renderer.setElementStyle(this._el_6,'pointer-events',((this.viewUtils.sanitizer.sanitize(import16.SecurityContext.STYLE,currVal_20) == null)? (null as any): this.viewUtils.sanitizer.sanitize(import16.SecurityContext.STYLE,currVal_20).toString()));
      this._expr_20 = currVal_20;
    }
  }
  dirtyParentQueriesInternal():void {
    (<View_AreaTooltip0>this.parentView)._viewQuery_tooltips_0.setDirty();
  }
  destroyInternal():void {
    this._vc_4.destroyNestedViews();
    this._vc_6.destroyNestedViews();
    this._TooltipDirective_6_5.ngOnDestroy();
  }
  detachInternal():void {
    var animationTransition_animationState:any = this.componentType.animations['animationState'](this,this._el_6,this._expr_15,'void');
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 4)) { return new View_AreaTooltip2(this.viewUtils,this,4,this._anchor_4,this._vc_4); }
    return (null as any);
  }
  handleEvent_2(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'mouseenter')) {
      const pd_sub_0:any = ((<any>this.parentView.context.showTooltip(this.context.index)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'mouseleave')) {
      const pd_sub_1:any = ((<any>this.parentView.context.hideTooltip(this.context.index)) !== false);
      result = (pd_sub_1 && result);
    }
    return result;
  }
  handleEvent_6(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._TooltipDirective_6_5.handleEvent(eventName,$event) && result);
    return result;
  }
}
var renderType_AreaTooltip:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_AreaTooltip,{'animationState': AreaTooltip_animationState_factory});
export class View_AreaTooltip0 extends import2.AppView<import0.AreaTooltip> {
  _viewQuery_tooltips_0:import26.QueryList<any>;
  _text_0:any;
  _anchor_1:any;
  /*private*/ _vc_1:import15.ViewContainer;
  _TemplateRef_1_5:any;
  _NgFor_1_6:import17.Wrapper_NgFor;
  _text_2:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_AreaTooltip0,renderType_AreaTooltip,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._viewQuery_tooltips_0 = new import26.QueryList<any>();
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this._anchor_1 = this.renderer.createTemplateAnchor(parentRenderNode,(null as any));
    this._vc_1 = new import15.ViewContainer(1,(null as any),this,this._anchor_1);
    this._TemplateRef_1_5 = new import18.TemplateRef_(this,1,this._anchor_1);
    this._NgFor_1_6 = new import17.Wrapper_NgFor(this._vc_1.vcRef,this._TemplateRef_1_5,this.parentView.injectorGet(import19.IterableDiffers,this.parentIndex),this.ref);
    this._text_2 = this.renderer.createText(parentRenderNode,'\n  ',(null as any));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._anchor_1,
      this._text_2
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import18.TemplateRef) && (1 === requestNodeIndex))) { return this._TemplateRef_1_5; }
    if (((token === import20.NgFor) && (1 === requestNodeIndex))) { return this._NgFor_1_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_1_0_0:any = this.context.tooltipAreas;
    this._NgFor_1_6.check_ngForOf(currVal_1_0_0,throwOnChange,false);
    this._NgFor_1_6.ngDoCheck(this,this._anchor_1,throwOnChange);
    this._vc_1.detectChangesInNestedViews(throwOnChange);
    if (!throwOnChange) { if (this._viewQuery_tooltips_0.dirty) {
        this._viewQuery_tooltips_0.reset([this._vc_1.mapNestedViews(View_AreaTooltip1,(nestedView:View_AreaTooltip1):any => {
          return [new import23.ElementRef(nestedView._el_0)];
      })]);
      this.context.tooltips = this._viewQuery_tooltips_0;
      this._viewQuery_tooltips_0.notifyOnChanges();
    } }
  }
  destroyInternal():void {
    this._vc_1.destroyNestedViews();
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 1)) { return new View_AreaTooltip1(this.viewUtils,this,1,this._anchor_1,this._vc_1); }
    return (null as any);
  }
}