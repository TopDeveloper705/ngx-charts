/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../src/bubble-chart/bubble-series.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from '@angular/core/src/animation/animation_transition';
import * as import10 from '@angular/core/src/animation/animation_sequence_player';
import * as import11 from '@angular/core/src/animation/animation_styles';
import * as import12 from '@angular/core/src/animation/animation_style_util';
import * as import13 from '@angular/core/src/animation/animation_keyframe';
import * as import14 from '@angular/core/src/animation/animation_player';
import * as import15 from '@angular/core/src/linker/view_container';
import * as import16 from '../../../src/common/circle.component';
import * as import17 from '../common/tooltip/tooltip.directive.ngfactory';
import * as import18 from '../common/circle.component.ngfactory';
import * as import19 from '../../../src/common/tooltip/tooltip.service';
import * as import20 from '@angular/core/src/linker/element_ref';
import * as import21 from '@angular/core/src/zone/ng_zone';
import * as import22 from '../../../src/common/tooltip/tooltip.directive';
import * as import23 from '@angular/core/src/security';
import * as import24 from '../../node_modules/@angular/common/src/directives/ng_for.ngfactory';
import * as import25 from '@angular/core/src/linker/template_ref';
import * as import26 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import27 from '@angular/common/src/directives/ng_for';
export class Wrapper_BubbleSeriesComponent {
  /*private*/ _eventHandler:Function;
  context:import0.BubbleSeriesComponent;
  /*private*/ _changed:boolean;
  /*private*/ _changes:{[key: string]:any};
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  subscription0:any;
  subscription1:any;
  subscription2:any;
  constructor() {
    this._changed = false;
    this._changes = {};
    this.context = new import0.BubbleSeriesComponent();
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
    this._expr_4 = import1.UNINITIALIZED;
    this._expr_5 = import1.UNINITIALIZED;
    this._expr_6 = import1.UNINITIALIZED;
    this._expr_7 = import1.UNINITIALIZED;
    this._expr_8 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
    (this.subscription2 && this.subscription2.unsubscribe());
  }
  check_data(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.data = currValue;
      this._changes['data'] = new import1.SimpleChange(this._expr_0,currValue);
      this._expr_0 = currValue;
    }
  }
  check_xScale(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.xScale = currValue;
      this._changes['xScale'] = new import1.SimpleChange(this._expr_1,currValue);
      this._expr_1 = currValue;
    }
  }
  check_yScale(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.yScale = currValue;
      this._changes['yScale'] = new import1.SimpleChange(this._expr_2,currValue);
      this._expr_2 = currValue;
    }
  }
  check_rScale(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.rScale = currValue;
      this._changes['rScale'] = new import1.SimpleChange(this._expr_3,currValue);
      this._expr_3 = currValue;
    }
  }
  check_xScaleType(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.xScaleType = currValue;
      this._changes['xScaleType'] = new import1.SimpleChange(this._expr_4,currValue);
      this._expr_4 = currValue;
    }
  }
  check_yScaleType(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this._changed = true;
      this.context.yScaleType = currValue;
      this._changes['yScaleType'] = new import1.SimpleChange(this._expr_5,currValue);
      this._expr_5 = currValue;
    }
  }
  check_colors(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_6,currValue))) {
      this._changed = true;
      this.context.colors = currValue;
      this._changes['colors'] = new import1.SimpleChange(this._expr_6,currValue);
      this._expr_6 = currValue;
    }
  }
  check_visibleValue(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_7,currValue))) {
      this._changed = true;
      this.context.visibleValue = currValue;
      this._changes['visibleValue'] = new import1.SimpleChange(this._expr_7,currValue);
      this._expr_7 = currValue;
    }
  }
  check_activeEntries(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_8,currValue))) {
      this._changed = true;
      this.context.activeEntries = currValue;
      this._changes['activeEntries'] = new import1.SimpleChange(this._expr_8,currValue);
      this._expr_8 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if (changed) {
      this.context.ngOnChanges(this._changes);
      this._changes = {};
    } }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean,emit2:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.select.subscribe(_eventHandler.bind(view,'select'))); }
    if (emit1) { (this.subscription1 = this.context.activate.subscribe(_eventHandler.bind(view,'activate'))); }
    if (emit2) { (this.subscription2 = this.context.deactivate.subscribe(_eventHandler.bind(view,'deactivate'))); }
  }
}
var renderType_BubbleSeriesComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_BubbleSeriesComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.BubbleSeriesComponent>;
  _BubbleSeriesComponent_0_3:Wrapper_BubbleSeriesComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_BubbleSeriesComponent_Host0,renderType_BubbleSeriesComponent_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'g',new import3.InlineArray2(2,'ngx-charts-bubble-series',''),rootSelector,(null as any));
    this.compView_0 = new View_BubbleSeriesComponent0(this.viewUtils,this,0,this._el_0);
    this._BubbleSeriesComponent_0_3 = new Wrapper_BubbleSeriesComponent();
    this.compView_0.create(this._BubbleSeriesComponent_0_3.context);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),(null as any));
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._BubbleSeriesComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.BubbleSeriesComponent) && (0 === requestNodeIndex))) { return this._BubbleSeriesComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (this._BubbleSeriesComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._BubbleSeriesComponent_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
export const BubbleSeriesComponentNgFactory:import8.ComponentFactory<import0.BubbleSeriesComponent> = new import8.ComponentFactory<import0.BubbleSeriesComponent>('g[ngx-charts-bubble-series]',View_BubbleSeriesComponent_Host0,import0.BubbleSeriesComponent);
const styles_BubbleSeriesComponent:any[] = ([] as any[]);
var BubbleSeriesComponent_animationState_states:any = {
  '*': {},
  'void': {}
}
;
function BubbleSeriesComponent_animationState_factory(view:import2.AppView<any>,element:any,currentState:any,nextState:any):import9.AnimationTransition {
  var previousPlayers:any = view.animationContext.getAnimationPlayers(element,((nextState == 'void')? (null as any): 'animationState'));
  var collectedStyles:any = {};
  var player:any = (null as any);
  var totalTime:any = 0;
  var defaultStateStyles:any = BubbleSeriesComponent_animationState_states['*'];
  var startStateStyles:any = BubbleSeriesComponent_animationState_states[currentState];
  if ((startStateStyles == (null as any))) { (startStateStyles = defaultStateStyles); }
  var endStateStyles:any = BubbleSeriesComponent_animationState_states[nextState];
  if ((endStateStyles == (null as any))) { (endStateStyles = defaultStateStyles); }
  if (((player == (null as any)) && ((currentState == 'void') && true))) {
      player = new import10.AnimationSequencePlayer([view.renderer.animate(element,new import11.AnimationStyles(import12.collectAndResolveStyles(collectedStyles,[
        startStateStyles,
        {'opacity': '0'}
      ]
      )),[
        new import13.AnimationKeyframe(0,new import11.AnimationStyles(import12.collectAndResolveStyles(collectedStyles,[{'opacity': '0'}]))),
        new import13.AnimationKeyframe(1,new import11.AnimationStyles(import12.collectAndResolveStyles(collectedStyles,[{'opacity': '1'}])))
      ]
    ,250,0,(null as any),previousPlayers)]);
    totalTime = 250;
  }
  if ((player == (null as any))) { (player = new import14.NoOpAnimationPlayer()); }
  player.onDone(():void => {
    player.destroy();
    import12.renderStyles(element,view.renderer,import12.prepareFinalAnimationStyles(startStateStyles,endStateStyles));
  });
  new import10.AnimationSequencePlayer(previousPlayers).destroy();
  import12.renderStyles(element,view.renderer,import12.clearStyles(startStateStyles));
  view.animationContext.queueAnimation(element,'animationState',player);
  return new import9.AnimationTransition(player,currentState,nextState,totalTime);
}
class View_BubbleSeriesComponent1 extends import2.AppView<any> {
  _el_0:any;
  _text_1:any;
  _el_2:any;
  /*private*/ _vc_2:import15.ViewContainer;
  compView_2:import2.AppView<import16.CircleComponent>;
  _TooltipDirective_2_5:import17.Wrapper_TooltipDirective;
  _CircleComponent_2_6:import18.Wrapper_CircleComponent;
  _text_3:any;
  /*private*/ _expr_8:any;
  /*private*/ _expr_9:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import15.ViewContainer) {
    super(View_BubbleSeriesComponent1,renderType_BubbleSeriesComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
    this._expr_8 = import1.UNINITIALIZED;
    this._expr_9 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),':svg:g',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'\n      ',(null as any));
    this._el_2 = import3.createRenderElement(this.renderer,this._el_0,':svg:g',new import3.InlineArray8(6,'class','circle','ngx-charts-circle','','ngx-tooltip',''),(null as any));
    this._vc_2 = new import15.ViewContainer(2,0,this,this._el_2);
    this.compView_2 = new import18.View_CircleComponent0(this.viewUtils,this,2,this._el_2);
    this._TooltipDirective_2_5 = new import17.Wrapper_TooltipDirective(this.parentView.injectorGet(import19.TooltipService,this.parentIndex),this._vc_2.vcRef,this.renderer,new import20.ElementRef(this._el_2),this.parentView.injectorGet(import21.NgZone,this.parentIndex));
    this._CircleComponent_2_6 = new import18.Wrapper_CircleComponent();
    this.compView_2.create(this._CircleComponent_2_6.context);
    this._text_3 = this.renderer.createText(this._el_0,'\n    ',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_2,new import3.InlineArray16(16,'select',(null as any),'activate',(null as any),'deactivate',(null as any),'focusin',(null as any),'blur',(null as any),'mouseenter',(null as any),'mouseleave',(null as any),'click',(null as any)),this.eventHandler(this.handleEvent_2));
    this._CircleComponent_2_6.subscribe(this,this.eventHandler(this.handleEvent_2),true,true,true);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import22.TooltipDirective) && (2 === requestNodeIndex))) { return this._TooltipDirective_2_5.context; }
    if (((token === import16.CircleComponent) && (2 === requestNodeIndex))) { return this._CircleComponent_2_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_2_0_0:any = this.parentView.context.getTooltipText(this.context.$implicit);
    this._TooltipDirective_2_5.check_tooltipTitle(currVal_2_0_0,throwOnChange,false);
    const currVal_2_0_1:any = 'top';
    this._TooltipDirective_2_5.check_tooltipPlacement(currVal_2_0_1,throwOnChange,false);
    const currVal_2_0_2:any = 'tooltip';
    this._TooltipDirective_2_5.check_tooltipType(currVal_2_0_2,throwOnChange,false);
    this._TooltipDirective_2_5.ngDoCheck(this,this._el_2,throwOnChange);
    const currVal_2_1_0:any = this.context.$implicit.cx;
    this._CircleComponent_2_6.check_cx(currVal_2_1_0,throwOnChange,false);
    const currVal_2_1_1:any = this.context.$implicit.cy;
    this._CircleComponent_2_6.check_cy(currVal_2_1_1,throwOnChange,false);
    const currVal_2_1_2:any = this.context.$implicit.radius;
    this._CircleComponent_2_6.check_r(currVal_2_1_2,throwOnChange,false);
    const currVal_2_1_3:any = this.context.$implicit.color;
    this._CircleComponent_2_6.check_fill(currVal_2_1_3,throwOnChange,false);
    const currVal_2_1_4:any = this.context.$implicit.value;
    this._CircleComponent_2_6.check_data(currVal_2_1_4,throwOnChange,false);
    const currVal_2_1_5:any = this.context.$implicit.classNames;
    this._CircleComponent_2_6.check_classNames(currVal_2_1_5,throwOnChange,false);
    const currVal_2_1_6:any = 'all';
    this._CircleComponent_2_6.check_pointerEvents(currVal_2_1_6,throwOnChange,false);
    if (this._CircleComponent_2_6.ngDoCheck(this,this._el_2,throwOnChange)) { this.compView_2.markAsCheckOnce(); }
    this._vc_2.detectChangesInNestedViews(throwOnChange);
    const currVal_8:any = this.context.$implicit.opacity;
    if (import3.checkBinding(throwOnChange,this._expr_8,currVal_8)) {
      this.renderer.setElementStyle(this._el_2,'opacity',((this.viewUtils.sanitizer.sanitize(import23.SecurityContext.STYLE,currVal_8) == null)? (null as any): this.viewUtils.sanitizer.sanitize(import23.SecurityContext.STYLE,currVal_8).toString()));
      this._expr_8 = currVal_8;
    }
    const currVal_9:any = this.context.$implicit.isActive;
    if (import3.checkBinding(throwOnChange,this._expr_9,currVal_9)) {
      this.renderer.setElementClass(this._el_2,'active',currVal_9);
      this._expr_9 = currVal_9;
    }
    this.compView_2.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this._vc_2.destroyNestedViews();
    this.compView_2.destroy();
    this._TooltipDirective_2_5.ngOnDestroy();
    this._CircleComponent_2_6.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_2(eventName:string,$event:any):boolean {
    this.compView_2.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._TooltipDirective_2_5.handleEvent(eventName,$event) && result);
    result = (this._CircleComponent_2_6.handleEvent(eventName,$event) && result);
    if ((eventName == 'select')) {
      const pd_sub_0:any = ((<any>this.parentView.context.onClick($event,this.context.$implicit.label)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'activate')) {
      const pd_sub_1:any = ((<any>this.parentView.context.activateCircle(this.context.$implicit)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'deactivate')) {
      const pd_sub_2:any = ((<any>this.parentView.context.deactivateCircle(this.context.$implicit)) !== false);
      result = (pd_sub_2 && result);
    }
    return result;
  }
}
var renderType_BubbleSeriesComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_BubbleSeriesComponent,{'animationState': BubbleSeriesComponent_animationState_factory});
export class View_BubbleSeriesComponent0 extends import2.AppView<import0.BubbleSeriesComponent> {
  _text_0:any;
  _anchor_1:any;
  /*private*/ _vc_1:import15.ViewContainer;
  _TemplateRef_1_5:any;
  _NgFor_1_6:import24.Wrapper_NgFor;
  _text_2:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_BubbleSeriesComponent0,renderType_BubbleSeriesComponent,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckOnce);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this._anchor_1 = this.renderer.createTemplateAnchor(parentRenderNode,(null as any));
    this._vc_1 = new import15.ViewContainer(1,(null as any),this,this._anchor_1);
    this._TemplateRef_1_5 = new import25.TemplateRef_(this,1,this._anchor_1);
    this._NgFor_1_6 = new import24.Wrapper_NgFor(this._vc_1.vcRef,this._TemplateRef_1_5,this.parentView.injectorGet(import26.IterableDiffers,this.parentIndex),this.ref);
    this._text_2 = this.renderer.createText(parentRenderNode,'\n  ',(null as any));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._anchor_1,
      this._text_2
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import25.TemplateRef) && (1 === requestNodeIndex))) { return this._TemplateRef_1_5; }
    if (((token === import27.NgFor) && (1 === requestNodeIndex))) { return this._NgFor_1_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_1_0_0:any = this.context.circles;
    this._NgFor_1_6.check_ngForOf(currVal_1_0_0,throwOnChange,false);
    this._NgFor_1_6.ngDoCheck(this,this._anchor_1,throwOnChange);
    this._vc_1.detectChangesInNestedViews(throwOnChange);
  }
  destroyInternal():void {
    this._vc_1.destroyNestedViews();
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 1)) { return new View_BubbleSeriesComponent1(this.viewUtils,this,1,this._anchor_1,this._vc_1); }
    return (null as any);
  }
}