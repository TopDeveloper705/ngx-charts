/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../src/bubble-chart/bubble-chart.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from '@angular/core/src/linker/element_ref';
import * as import10 from '@angular/core/src/zone/ng_zone';
import * as import11 from '@angular/common/src/location/location';
import * as import12 from '../../../src/common/axes/x-axis.component';
import * as import13 from '../common/axes/x-axis.component.ngfactory';
import * as import14 from '@angular/core/src/linker/view_container';
import * as import15 from '../../../src/common/axes/y-axis.component';
import * as import16 from '../common/axes/y-axis.component.ngfactory';
import * as import17 from '../../../src/bubble-chart/bubble-series.component';
import * as import18 from './bubble-series.component.ngfactory';
import * as import19 from '../../../src/common/charts/chart.component';
import * as import20 from '../../../src/common/tooltip/tooltip.service';
import * as import21 from '../common/charts/chart.component.ngfactory';
import * as import22 from '../../node_modules/@angular/common/src/directives/ng_if.ngfactory';
import * as import23 from '../../node_modules/@angular/common/src/directives/ng_for.ngfactory';
import * as import24 from '../../../src/common/tooltip/injection.service';
import * as import25 from '@angular/core/src/linker/template_ref';
import * as import26 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import27 from '@angular/common/src/directives/ng_if';
import * as import28 from '@angular/common/src/directives/ng_for';
export class Wrapper_BubbleChartComponent {
  /*private*/ _eventHandler:Function;
  context:import0.BubbleChartComponent;
  /*private*/ _changed:boolean;
  /*private*/ _changes:{[key: string]:any};
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  /*private*/ _expr_9:any;
  /*private*/ _expr_10:any;
  /*private*/ _expr_11:any;
  /*private*/ _expr_12:any;
  /*private*/ _expr_13:any;
  /*private*/ _expr_14:any;
  /*private*/ _expr_15:any;
  /*private*/ _expr_16:any;
  /*private*/ _expr_17:any;
  /*private*/ _expr_18:any;
  /*private*/ _expr_19:any;
  subscription0:any;
  subscription1:any;
  subscription2:any;
  constructor(p0:any,p1:any,p2:any,p3:any) {
    this._changed = false;
    this._changes = {};
    this.context = new import0.BubbleChartComponent(p0,p1,p2,p3);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
    this._expr_4 = import1.UNINITIALIZED;
    this._expr_5 = import1.UNINITIALIZED;
    this._expr_6 = import1.UNINITIALIZED;
    this._expr_7 = import1.UNINITIALIZED;
    this._expr_8 = import1.UNINITIALIZED;
    this._expr_9 = import1.UNINITIALIZED;
    this._expr_10 = import1.UNINITIALIZED;
    this._expr_11 = import1.UNINITIALIZED;
    this._expr_12 = import1.UNINITIALIZED;
    this._expr_13 = import1.UNINITIALIZED;
    this._expr_14 = import1.UNINITIALIZED;
    this._expr_15 = import1.UNINITIALIZED;
    this._expr_16 = import1.UNINITIALIZED;
    this._expr_17 = import1.UNINITIALIZED;
    this._expr_18 = import1.UNINITIALIZED;
    this._expr_19 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
    (this.subscription2 && this.subscription2.unsubscribe());
  }
  check_results(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.results = currValue;
      this._changes['results'] = new import1.SimpleChange(this._expr_0,currValue);
      this._expr_0 = currValue;
    }
  }
  check_view(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.view = currValue;
      this._changes['view'] = new import1.SimpleChange(this._expr_1,currValue);
      this._expr_1 = currValue;
    }
  }
  check_scheme(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.scheme = currValue;
      this._changes['scheme'] = new import1.SimpleChange(this._expr_2,currValue);
      this._expr_2 = currValue;
    }
  }
  check_schemeType(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.schemeType = currValue;
      this._changes['schemeType'] = new import1.SimpleChange(this._expr_3,currValue);
      this._expr_3 = currValue;
    }
  }
  check_customColors(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.customColors = currValue;
      this._changes['customColors'] = new import1.SimpleChange(this._expr_4,currValue);
      this._expr_4 = currValue;
    }
  }
  check_showGridLines(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this._changed = true;
      this.context.showGridLines = currValue;
      this._changes['showGridLines'] = new import1.SimpleChange(this._expr_5,currValue);
      this._expr_5 = currValue;
    }
  }
  check_legend(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_6,currValue))) {
      this._changed = true;
      this.context.legend = currValue;
      this._changes['legend'] = new import1.SimpleChange(this._expr_6,currValue);
      this._expr_6 = currValue;
    }
  }
  check_xAxis(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_7,currValue))) {
      this._changed = true;
      this.context.xAxis = currValue;
      this._changes['xAxis'] = new import1.SimpleChange(this._expr_7,currValue);
      this._expr_7 = currValue;
    }
  }
  check_yAxis(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_8,currValue))) {
      this._changed = true;
      this.context.yAxis = currValue;
      this._changes['yAxis'] = new import1.SimpleChange(this._expr_8,currValue);
      this._expr_8 = currValue;
    }
  }
  check_showXAxisLabel(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_9,currValue))) {
      this._changed = true;
      this.context.showXAxisLabel = currValue;
      this._changes['showXAxisLabel'] = new import1.SimpleChange(this._expr_9,currValue);
      this._expr_9 = currValue;
    }
  }
  check_showYAxisLabel(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_10,currValue))) {
      this._changed = true;
      this.context.showYAxisLabel = currValue;
      this._changes['showYAxisLabel'] = new import1.SimpleChange(this._expr_10,currValue);
      this._expr_10 = currValue;
    }
  }
  check_xAxisLabel(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_11,currValue))) {
      this._changed = true;
      this.context.xAxisLabel = currValue;
      this._changes['xAxisLabel'] = new import1.SimpleChange(this._expr_11,currValue);
      this._expr_11 = currValue;
    }
  }
  check_yAxisLabel(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_12,currValue))) {
      this._changed = true;
      this.context.yAxisLabel = currValue;
      this._changes['yAxisLabel'] = new import1.SimpleChange(this._expr_12,currValue);
      this._expr_12 = currValue;
    }
  }
  check_xAxisTickFormatting(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_13,currValue))) {
      this._changed = true;
      this.context.xAxisTickFormatting = currValue;
      this._changes['xAxisTickFormatting'] = new import1.SimpleChange(this._expr_13,currValue);
      this._expr_13 = currValue;
    }
  }
  check_yAxisTickFormatting(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_14,currValue))) {
      this._changed = true;
      this.context.yAxisTickFormatting = currValue;
      this._changes['yAxisTickFormatting'] = new import1.SimpleChange(this._expr_14,currValue);
      this._expr_14 = currValue;
    }
  }
  check_roundDomains(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_15,currValue))) {
      this._changed = true;
      this.context.roundDomains = currValue;
      this._changes['roundDomains'] = new import1.SimpleChange(this._expr_15,currValue);
      this._expr_15 = currValue;
    }
  }
  check_maxRadius(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_16,currValue))) {
      this._changed = true;
      this.context.maxRadius = currValue;
      this._changes['maxRadius'] = new import1.SimpleChange(this._expr_16,currValue);
      this._expr_16 = currValue;
    }
  }
  check_minRadius(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_17,currValue))) {
      this._changed = true;
      this.context.minRadius = currValue;
      this._changes['minRadius'] = new import1.SimpleChange(this._expr_17,currValue);
      this._expr_17 = currValue;
    }
  }
  check_autoScale(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_18,currValue))) {
      this._changed = true;
      this.context.autoScale = currValue;
      this._changes['autoScale'] = new import1.SimpleChange(this._expr_18,currValue);
      this._expr_18 = currValue;
    }
  }
  check_legendPosition(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_19,currValue))) {
      this._changed = true;
      this.context.legendPosition = currValue;
      this._changes['legendPosition'] = new import1.SimpleChange(this._expr_19,currValue);
      this._expr_19 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if (changed) {
      this.context.ngOnChanges(this._changes);
      this._changes = {};
    } }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    if ((eventName == 'mouseleave')) {
      const pd_sub_0:any = ((<any>this.context.hideCircles()) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean,emit2:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.select.subscribe(_eventHandler.bind(view,'select'))); }
    if (emit1) { (this.subscription1 = this.context.activate.subscribe(_eventHandler.bind(view,'activate'))); }
    if (emit2) { (this.subscription2 = this.context.deactivate.subscribe(_eventHandler.bind(view,'deactivate'))); }
  }
}
var renderType_BubbleChartComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_BubbleChartComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.BubbleChartComponent>;
  _BubbleChartComponent_0_3:Wrapper_BubbleChartComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_BubbleChartComponent_Host0,renderType_BubbleChartComponent_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'ngx-charts-bubble-chart',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_BubbleChartComponent0(this.viewUtils,this,0,this._el_0);
    this._BubbleChartComponent_0_3 = new Wrapper_BubbleChartComponent(new import9.ElementRef(this._el_0),this.injectorGet(import10.NgZone,this.parentIndex),this.compView_0.ref,this.injectorGet(import11.Location,this.parentIndex));
    this.compView_0.create(this._BubbleChartComponent_0_3.context);
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray2(2,'mouseleave',(null as any)),this.eventHandler(this.handleEvent_0));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),[disposable_0]);
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._BubbleChartComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.BubbleChartComponent) && (0 === requestNodeIndex))) { return this._BubbleChartComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    this._BubbleChartComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange);
    this.compView_0.internalDetectChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._BubbleChartComponent_0_3.context.ngAfterViewInit(); } }
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._BubbleChartComponent_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.compView_0.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._BubbleChartComponent_0_3.handleEvent(eventName,$event) && result);
    return result;
  }
}
export const BubbleChartComponentNgFactory:import8.ComponentFactory<import0.BubbleChartComponent> = new import8.ComponentFactory<import0.BubbleChartComponent>('ngx-charts-bubble-chart',View_BubbleChartComponent_Host0,import0.BubbleChartComponent);
const styles_BubbleChartComponent:any[] = ([] as any[]);
class View_BubbleChartComponent1 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import12.XAxisComponent>;
  _XAxisComponent_0_3:import13.Wrapper_XAxisComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import14.ViewContainer) {
    super(View_BubbleChartComponent1,renderType_BubbleChartComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),':svg:g',new import3.InlineArray2(2,'ngx-charts-x-axis',''),(null as any));
    this.compView_0 = new import13.View_XAxisComponent0(this.viewUtils,this,0,this._el_0);
    this._XAxisComponent_0_3 = new import13.Wrapper_XAxisComponent();
    this.compView_0.create(this._XAxisComponent_0_3.context);
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray2(2,'dimensionsChanged',(null as any)),this.eventHandler(this.handleEvent_0));
    this._XAxisComponent_0_3.subscribe(this,this.eventHandler(this.handleEvent_0),true);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import12.XAxisComponent) && (0 === requestNodeIndex))) { return this._XAxisComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = this.parentView.context.xScale;
    this._XAxisComponent_0_3.check_xScale(currVal_0_0_0,throwOnChange,false);
    const currVal_0_0_1:any = this.parentView.context.dims;
    this._XAxisComponent_0_3.check_dims(currVal_0_0_1,throwOnChange,false);
    const currVal_0_0_2:any = this.parentView.context.xAxisTickFormatting;
    this._XAxisComponent_0_3.check_tickFormatting(currVal_0_0_2,throwOnChange,false);
    const currVal_0_0_3:any = this.parentView.context.showGridLines;
    this._XAxisComponent_0_3.check_showGridLines(currVal_0_0_3,throwOnChange,false);
    const currVal_0_0_4:any = this.parentView.context.showXAxisLabel;
    this._XAxisComponent_0_3.check_showLabel(currVal_0_0_4,throwOnChange,false);
    const currVal_0_0_5:any = this.parentView.context.xAxisLabel;
    this._XAxisComponent_0_3.check_labelText(currVal_0_0_5,throwOnChange,false);
    if (this._XAxisComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._XAxisComponent_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'dimensionsChanged')) {
      const pd_sub_0:any = ((<any>this.parentView.context.updateXAxisHeight($event)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}
class View_BubbleChartComponent2 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import15.YAxisComponent>;
  _YAxisComponent_0_3:import16.Wrapper_YAxisComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import14.ViewContainer) {
    super(View_BubbleChartComponent2,renderType_BubbleChartComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),':svg:g',new import3.InlineArray2(2,'ngx-charts-y-axis',''),(null as any));
    this.compView_0 = new import16.View_YAxisComponent0(this.viewUtils,this,0,this._el_0);
    this._YAxisComponent_0_3 = new import16.Wrapper_YAxisComponent();
    this.compView_0.create(this._YAxisComponent_0_3.context);
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray2(2,'dimensionsChanged',(null as any)),this.eventHandler(this.handleEvent_0));
    this._YAxisComponent_0_3.subscribe(this,this.eventHandler(this.handleEvent_0),true);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import15.YAxisComponent) && (0 === requestNodeIndex))) { return this._YAxisComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = this.parentView.context.yScale;
    this._YAxisComponent_0_3.check_yScale(currVal_0_0_0,throwOnChange,false);
    const currVal_0_0_1:any = this.parentView.context.dims;
    this._YAxisComponent_0_3.check_dims(currVal_0_0_1,throwOnChange,false);
    const currVal_0_0_2:any = this.parentView.context.yAxisTickFormatting;
    this._YAxisComponent_0_3.check_tickFormatting(currVal_0_0_2,throwOnChange,false);
    const currVal_0_0_3:any = this.parentView.context.showGridLines;
    this._YAxisComponent_0_3.check_showGridLines(currVal_0_0_3,throwOnChange,false);
    const currVal_0_0_4:any = this.parentView.context.showYAxisLabel;
    this._YAxisComponent_0_3.check_showLabel(currVal_0_0_4,throwOnChange,false);
    const currVal_0_0_5:any = this.parentView.context.yAxisLabel;
    this._YAxisComponent_0_3.check_labelText(currVal_0_0_5,throwOnChange,false);
    if (this._YAxisComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._YAxisComponent_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'dimensionsChanged')) {
      const pd_sub_0:any = ((<any>this.parentView.context.updateYAxisWidth($event)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}
class View_BubbleChartComponent3 extends import2.AppView<any> {
  _el_0:any;
  _text_1:any;
  _el_2:any;
  compView_2:import2.AppView<import17.BubbleSeriesComponent>;
  _BubbleSeriesComponent_2_3:import18.Wrapper_BubbleSeriesComponent;
  _text_3:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import14.ViewContainer) {
    super(View_BubbleChartComponent3,renderType_BubbleChartComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),':svg:g',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'\n          ',(null as any));
    this._el_2 = import3.createRenderElement(this.renderer,this._el_0,':svg:g',new import3.InlineArray2(2,'ngx-charts-bubble-series',''),(null as any));
    this.compView_2 = new import18.View_BubbleSeriesComponent0(this.viewUtils,this,2,this._el_2);
    this._BubbleSeriesComponent_2_3 = new import18.Wrapper_BubbleSeriesComponent();
    this.compView_2.create(this._BubbleSeriesComponent_2_3.context);
    this._text_3 = this.renderer.createText(this._el_0,'\n        ',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_2,new import3.InlineArray8(6,'select',(null as any),'activate',(null as any),'deactivate',(null as any)),this.eventHandler(this.handleEvent_2));
    this._BubbleSeriesComponent_2_3.subscribe(this,this.eventHandler(this.handleEvent_2),true,true,true);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import17.BubbleSeriesComponent) && (2 === requestNodeIndex))) { return this._BubbleSeriesComponent_2_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_2_0_0:any = this.context.$implicit;
    this._BubbleSeriesComponent_2_3.check_data(currVal_2_0_0,throwOnChange,false);
    const currVal_2_0_1:any = this.parentView.context.xScale;
    this._BubbleSeriesComponent_2_3.check_xScale(currVal_2_0_1,throwOnChange,false);
    const currVal_2_0_2:any = this.parentView.context.yScale;
    this._BubbleSeriesComponent_2_3.check_yScale(currVal_2_0_2,throwOnChange,false);
    const currVal_2_0_3:any = this.parentView.context.rScale;
    this._BubbleSeriesComponent_2_3.check_rScale(currVal_2_0_3,throwOnChange,false);
    const currVal_2_0_4:any = this.parentView.context.xScaleType;
    this._BubbleSeriesComponent_2_3.check_xScaleType(currVal_2_0_4,throwOnChange,false);
    const currVal_2_0_5:any = this.parentView.context.yScaleType;
    this._BubbleSeriesComponent_2_3.check_yScaleType(currVal_2_0_5,throwOnChange,false);
    const currVal_2_0_6:any = this.parentView.context.colors;
    this._BubbleSeriesComponent_2_3.check_colors(currVal_2_0_6,throwOnChange,false);
    const currVal_2_0_7:any = this.parentView.context.activeEntries;
    this._BubbleSeriesComponent_2_3.check_activeEntries(currVal_2_0_7,throwOnChange,false);
    const currVal_2_0_8:any = this.parentView.context.xAxisLabel;
    this._BubbleSeriesComponent_2_3.check_xAxisLabel(currVal_2_0_8,throwOnChange,false);
    const currVal_2_0_9:any = this.parentView.context.yAxisLabel;
    this._BubbleSeriesComponent_2_3.check_yAxisLabel(currVal_2_0_9,throwOnChange,false);
    if (this._BubbleSeriesComponent_2_3.ngDoCheck(this,this._el_2,throwOnChange)) { this.compView_2.markAsCheckOnce(); }
    this.compView_2.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_2.destroy();
    this._BubbleSeriesComponent_2_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_2(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'select')) {
      const pd_sub_0:any = ((<any>this.parentView.context.onClick($event,this.context.$implicit)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'activate')) {
      const pd_sub_1:any = ((<any>this.parentView.context.onActivate($event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'deactivate')) {
      const pd_sub_2:any = ((<any>this.parentView.context.onDeactivate($event)) !== false);
      result = (pd_sub_2 && result);
    }
    return result;
  }
}
var renderType_BubbleChartComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_BubbleChartComponent,{});
export class View_BubbleChartComponent0 extends import2.AppView<import0.BubbleChartComponent> {
  _text_0:any;
  _el_1:any;
  /*private*/ _vc_1:import14.ViewContainer;
  compView_1:import2.AppView<import19.ChartComponent>;
  _TooltipService_1_5:import20.TooltipService;
  _ChartComponent_1_6:import21.Wrapper_ChartComponent;
  _text_2:any;
  _el_3:any;
  _text_4:any;
  _el_5:any;
  _text_6:any;
  _el_7:any;
  _text_8:any;
  _text_9:any;
  _text_10:any;
  _el_11:any;
  _text_12:any;
  _anchor_13:any;
  /*private*/ _vc_13:import14.ViewContainer;
  _TemplateRef_13_5:any;
  _NgIf_13_6:import22.Wrapper_NgIf;
  _text_14:any;
  _anchor_15:any;
  /*private*/ _vc_15:import14.ViewContainer;
  _TemplateRef_15_5:any;
  _NgIf_15_6:import22.Wrapper_NgIf;
  _text_16:any;
  _el_17:any;
  _text_18:any;
  _anchor_19:any;
  /*private*/ _vc_19:import14.ViewContainer;
  _TemplateRef_19_5:any;
  _NgFor_19_6:import23.Wrapper_NgFor;
  _text_20:any;
  _text_21:any;
  _arr_35:any;
  /*private*/ _expr_36:any;
  /*private*/ _expr_37:any;
  /*private*/ _expr_38:any;
  /*private*/ _expr_39:any;
  /*private*/ _expr_40:any;
  /*private*/ _expr_41:any;
  /*private*/ _expr_42:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_BubbleChartComponent0,renderType_BubbleChartComponent,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
    this._arr_35 = import3.pureProxy2((p0:any,p1:any):any[] => {
      return [
        p0,
        p1
      ]
      ;
    });
    this._expr_36 = import1.UNINITIALIZED;
    this._expr_37 = import1.UNINITIALIZED;
    this._expr_38 = import1.UNINITIALIZED;
    this._expr_39 = import1.UNINITIALIZED;
    this._expr_40 = import1.UNINITIALIZED;
    this._expr_41 = import1.UNINITIALIZED;
    this._expr_42 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'ngx-charts-chart',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._vc_1 = new import14.ViewContainer(1,(null as any),this,this._el_1);
    this.compView_1 = new import21.View_ChartComponent0(this.viewUtils,this,1,this._el_1);
    this._TooltipService_1_5 = new import20.TooltipService(this.parentView.injectorGet(import24.InjectionService,this.parentIndex));
    this._ChartComponent_1_6 = new import21.Wrapper_ChartComponent(this._vc_1.vcRef,this._TooltipService_1_5);
    this._text_2 = this.renderer.createText((null as any),'\n\n      ',(null as any));
    this._el_3 = import3.createRenderElement(this.renderer,(null as any),':svg:defs',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_4 = this.renderer.createText(this._el_3,'\n        ',(null as any));
    this._el_5 = import3.createRenderElement(this.renderer,this._el_3,':svg:clipPath',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_6 = this.renderer.createText(this._el_5,'\n          ',(null as any));
    this._el_7 = import3.createRenderElement(this.renderer,this._el_5,':svg:rect',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_8 = this.renderer.createText(this._el_5,'\n        ',(null as any));
    this._text_9 = this.renderer.createText(this._el_3,'\n      ',(null as any));
    this._text_10 = this.renderer.createText((null as any),'\n\n      ',(null as any));
    this._el_11 = import3.createRenderElement(this.renderer,(null as any),':svg:g',new import3.InlineArray2(2,'class','bubble-chart chart'),(null as any));
    this._text_12 = this.renderer.createText(this._el_11,'\n\n        ',(null as any));
    this._anchor_13 = this.renderer.createTemplateAnchor(this._el_11,(null as any));
    this._vc_13 = new import14.ViewContainer(13,11,this,this._anchor_13);
    this._TemplateRef_13_5 = new import25.TemplateRef_(this,13,this._anchor_13);
    this._NgIf_13_6 = new import22.Wrapper_NgIf(this._vc_13.vcRef,this._TemplateRef_13_5);
    this._text_14 = this.renderer.createText(this._el_11,'\n\n        ',(null as any));
    this._anchor_15 = this.renderer.createTemplateAnchor(this._el_11,(null as any));
    this._vc_15 = new import14.ViewContainer(15,11,this,this._anchor_15);
    this._TemplateRef_15_5 = new import25.TemplateRef_(this,15,this._anchor_15);
    this._NgIf_15_6 = new import22.Wrapper_NgIf(this._vc_15.vcRef,this._TemplateRef_15_5);
    this._text_16 = this.renderer.createText(this._el_11,'\n\n        ',(null as any));
    this._el_17 = import3.createRenderElement(this.renderer,this._el_11,':svg:rect',new import3.InlineArray8(8,'class','bubble-chart-area','style','fill: rgb(255, 0, 0); opacity: 0; cursor: \'auto\';','x','0','y','0'),(null as any));
    this._text_18 = this.renderer.createText(this._el_11,'\n\n        ',(null as any));
    this._anchor_19 = this.renderer.createTemplateAnchor(this._el_11,(null as any));
    this._vc_19 = new import14.ViewContainer(19,11,this,this._anchor_19);
    this._TemplateRef_19_5 = new import25.TemplateRef_(this,19,this._anchor_19);
    this._NgFor_19_6 = new import23.Wrapper_NgFor(this._vc_19.vcRef,this._TemplateRef_19_5,this.parentView.injectorGet(import26.IterableDiffers,this.parentIndex),this.ref);
    this._text_20 = this.renderer.createText(this._el_11,'\n\n      ',(null as any));
    this._text_21 = this.renderer.createText((null as any),'\n    ',(null as any));
    this.compView_1.create(this._ChartComponent_1_6.context);
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_1,new import3.InlineArray8(6,'legendLabelClick',(null as any),'legendLabelActivate',(null as any),'legendLabelDeactivate',(null as any)),this.eventHandler(this.handleEvent_1));
    this._ChartComponent_1_6.subscribe(this,this.eventHandler(this.handleEvent_1),true,true,true);
    var disposable_1:Function = import3.subscribeToRenderElement(this,this._el_17,new import3.InlineArray2(2,'mouseenter',(null as any)),this.eventHandler(this.handleEvent_17));
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._el_5,
      this._text_6,
      this._el_7,
      this._text_8,
      this._text_9,
      this._text_10,
      this._el_11,
      this._text_12,
      this._anchor_13,
      this._text_14,
      this._anchor_15,
      this._text_16,
      this._el_17,
      this._text_18,
      this._anchor_19,
      this._text_20,
      this._text_21
    ]
    ),[
      disposable_0,
      disposable_1
    ]
    );
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import25.TemplateRef) && (13 === requestNodeIndex))) { return this._TemplateRef_13_5; }
    if (((token === import27.NgIf) && (13 === requestNodeIndex))) { return this._NgIf_13_6.context; }
    if (((token === import25.TemplateRef) && (15 === requestNodeIndex))) { return this._TemplateRef_15_5; }
    if (((token === import27.NgIf) && (15 === requestNodeIndex))) { return this._NgIf_15_6.context; }
    if (((token === import25.TemplateRef) && (19 === requestNodeIndex))) { return this._TemplateRef_19_5; }
    if (((token === import28.NgFor) && (19 === requestNodeIndex))) { return this._NgFor_19_6.context; }
    if (((token === import20.TooltipService) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 21)))) { return this._TooltipService_1_5; }
    if (((token === import19.ChartComponent) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 21)))) { return this._ChartComponent_1_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_1_0_0:any = this._arr_35(this.context.width,this.context.height);
    this._ChartComponent_1_6.check_view(currVal_1_0_0,throwOnChange,false);
    const currVal_1_0_1:any = this.context.legend;
    this._ChartComponent_1_6.check_showLegend(currVal_1_0_1,throwOnChange,false);
    const currVal_1_0_2:any = this.context.legendOptions;
    this._ChartComponent_1_6.check_legendOptions(currVal_1_0_2,throwOnChange,false);
    const currVal_1_0_3:any = this.context.activeEntries;
    this._ChartComponent_1_6.check_activeEntries(currVal_1_0_3,throwOnChange,false);
    if (this._ChartComponent_1_6.ngDoCheck(this,this._el_1,throwOnChange)) { this.compView_1.markAsCheckOnce(); }
    const currVal_13_0_0:any = this.context.xAxis;
    this._NgIf_13_6.check_ngIf(currVal_13_0_0,throwOnChange,false);
    this._NgIf_13_6.ngDoCheck(this,this._anchor_13,throwOnChange);
    const currVal_15_0_0:any = this.context.yAxis;
    this._NgIf_15_6.check_ngIf(currVal_15_0_0,throwOnChange,false);
    this._NgIf_15_6.ngDoCheck(this,this._anchor_15,throwOnChange);
    const currVal_19_0_0:any = this.context.data;
    this._NgFor_19_6.check_ngForOf(currVal_19_0_0,throwOnChange,false);
    this._NgFor_19_6.ngDoCheck(this,this._anchor_19,throwOnChange);
    this._vc_1.detectChangesInNestedViews(throwOnChange);
    this._vc_13.detectChangesInNestedViews(throwOnChange);
    this._vc_15.detectChangesInNestedViews(throwOnChange);
    this._vc_19.detectChangesInNestedViews(throwOnChange);
    const currVal_36:any = this.context.clipPathId;
    if (import3.checkBinding(throwOnChange,this._expr_36,currVal_36)) {
      this.renderer.setElementAttribute(this._el_5,'id',((currVal_36 == null)? (null as any): currVal_36.toString()));
      this._expr_36 = currVal_36;
    }
    const currVal_37:any = (this.context.dims.width + 10);
    if (import3.checkBinding(throwOnChange,this._expr_37,currVal_37)) {
      this.renderer.setElementAttribute(this._el_7,'width',((currVal_37 == null)? (null as any): currVal_37.toString()));
      this._expr_37 = currVal_37;
    }
    const currVal_38:any = (this.context.dims.height + 10);
    if (import3.checkBinding(throwOnChange,this._expr_38,currVal_38)) {
      this.renderer.setElementAttribute(this._el_7,'height',((currVal_38 == null)? (null as any): currVal_38.toString()));
      this._expr_38 = currVal_38;
    }
    const currVal_39:any = 'translate(-5, -5)';
    if (import3.checkBinding(throwOnChange,this._expr_39,currVal_39)) {
      this.renderer.setElementAttribute(this._el_7,'transform',((currVal_39 == null)? (null as any): currVal_39.toString()));
      this._expr_39 = currVal_39;
    }
    const currVal_40:any = this.context.transform;
    if (import3.checkBinding(throwOnChange,this._expr_40,currVal_40)) {
      this.renderer.setElementAttribute(this._el_11,'transform',((currVal_40 == null)? (null as any): currVal_40.toString()));
      this._expr_40 = currVal_40;
    }
    const currVal_41:any = this.context.dims.width;
    if (import3.checkBinding(throwOnChange,this._expr_41,currVal_41)) {
      this.renderer.setElementAttribute(this._el_17,'width',((currVal_41 == null)? (null as any): currVal_41.toString()));
      this._expr_41 = currVal_41;
    }
    const currVal_42:any = this.context.dims.height;
    if (import3.checkBinding(throwOnChange,this._expr_42,currVal_42)) {
      this.renderer.setElementAttribute(this._el_17,'height',((currVal_42 == null)? (null as any): currVal_42.toString()));
      this._expr_42 = currVal_42;
    }
    this.compView_1.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this._vc_1.destroyNestedViews();
    this._vc_13.destroyNestedViews();
    this._vc_15.destroyNestedViews();
    this._vc_19.destroyNestedViews();
    this.compView_1.destroy();
    this._ChartComponent_1_6.ngOnDestroy();
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 1) && (ngContentIndex == 0))) {
      cb(this._text_2,ctx);
      cb(this._el_3,ctx);
      cb(this._text_10,ctx);
      cb(this._el_11,ctx);
      cb(this._text_21,ctx);
    }
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 13)) { return new View_BubbleChartComponent1(this.viewUtils,this,13,this._anchor_13,this._vc_13); }
    if ((nodeIndex == 15)) { return new View_BubbleChartComponent2(this.viewUtils,this,15,this._anchor_15,this._vc_15); }
    if ((nodeIndex == 19)) { return new View_BubbleChartComponent3(this.viewUtils,this,19,this._anchor_19,this._vc_19); }
    return (null as any);
  }
  handleEvent_1(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'legendLabelClick')) {
      const pd_sub_0:any = ((<any>this.context.onClick($event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'legendLabelActivate')) {
      const pd_sub_1:any = ((<any>this.context.onActivate($event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'legendLabelDeactivate')) {
      const pd_sub_2:any = ((<any>this.context.onDeactivate($event)) !== false);
      result = (pd_sub_2 && result);
    }
    return result;
  }
  handleEvent_17(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'mouseenter')) {
      const pd_sub_0:any = ((<any>this.context.deactivateAll()) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}