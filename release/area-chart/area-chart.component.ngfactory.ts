/**
 * @fileoverview This file is generated by the Angular 2 template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties}
 */
 /* tslint:disable */

import * as import0 from '../../../build/area-chart/area-chart.component';
import * as import1 from '@angular/core/src/change_detection/change_detection_util';
import * as import2 from '@angular/core/src/linker/view';
import * as import3 from '@angular/core/src/linker/view_utils';
import * as import4 from '@angular/core/src/render/api';
import * as import5 from '@angular/core/src/metadata/view';
import * as import6 from '@angular/core/src/linker/view_type';
import * as import7 from '@angular/core/src/change_detection/constants';
import * as import8 from '@angular/core/src/linker/component_factory';
import * as import9 from '@angular/core/src/linker/element_ref';
import * as import10 from '@angular/core/src/zone/ng_zone';
import * as import11 from '@angular/common/src/location/location';
import * as import12 from '../common/base-chart.component.css.ngstyle';
import * as import13 from '../../../build/common/axes/x-axis.component';
import * as import14 from '../common/axes/x-axis.component.ngfactory';
import * as import15 from '@angular/core/src/linker/view_container';
import * as import16 from '../../../build/common/axes/y-axis.component';
import * as import17 from '../common/axes/y-axis.component.ngfactory';
import * as import18 from '../../../build/area-chart/area-series.component';
import * as import19 from './area-series.component.ngfactory';
import * as import20 from '../../../build/common/circle-series.component';
import * as import21 from '../common/circle-series.component.ngfactory';
import * as import22 from '../../../build/common/timeline/timeline.component';
import * as import23 from '../common/timeline/timeline.component.ngfactory';
import * as import24 from '../../node_modules/@angular/common/src/directives/ng_for.ngfactory';
import * as import25 from '@angular/core/src/linker/template_ref';
import * as import26 from '@angular/core/src/change_detection/differs/iterable_differs';
import * as import27 from '@angular/common/src/directives/ng_for';
import * as import28 from '../../../build/common/charts/chart.component';
import * as import29 from '../../../build/common/tooltip/tooltip.service';
import * as import30 from '../common/charts/chart.component.ngfactory';
import * as import31 from '../../node_modules/@angular/common/src/directives/ng_if.ngfactory';
import * as import32 from '../../../build/common/area-tooltip.component';
import * as import33 from '../common/area-tooltip.component.ngfactory';
import * as import34 from '../../../build/common/tooltip/injection.service';
import * as import35 from '@angular/common/src/directives/ng_if';
export class Wrapper_AreaChartComponent {
  /*private*/ _eventHandler:Function;
  context:import0.AreaChartComponent;
  /*private*/ _changed:boolean;
  /*private*/ _changes:{[key: string]:any};
  /*private*/ _expr_0:any;
  /*private*/ _expr_1:any;
  /*private*/ _expr_2:any;
  /*private*/ _expr_3:any;
  /*private*/ _expr_4:any;
  /*private*/ _expr_5:any;
  /*private*/ _expr_6:any;
  /*private*/ _expr_7:any;
  /*private*/ _expr_8:any;
  /*private*/ _expr_9:any;
  /*private*/ _expr_10:any;
  /*private*/ _expr_11:any;
  /*private*/ _expr_12:any;
  /*private*/ _expr_13:any;
  /*private*/ _expr_14:any;
  /*private*/ _expr_15:any;
  /*private*/ _expr_16:any;
  /*private*/ _expr_17:any;
  /*private*/ _expr_18:any;
  /*private*/ _expr_19:any;
  /*private*/ _expr_20:any;
  /*private*/ _expr_21:any;
  subscription0:any;
  subscription1:any;
  subscription2:any;
  constructor(p0:any,p1:any,p2:any,p3:any) {
    this._changed = false;
    this._changes = {};
    this.context = new import0.AreaChartComponent(p0,p1,p2,p3);
    this._expr_0 = import1.UNINITIALIZED;
    this._expr_1 = import1.UNINITIALIZED;
    this._expr_2 = import1.UNINITIALIZED;
    this._expr_3 = import1.UNINITIALIZED;
    this._expr_4 = import1.UNINITIALIZED;
    this._expr_5 = import1.UNINITIALIZED;
    this._expr_6 = import1.UNINITIALIZED;
    this._expr_7 = import1.UNINITIALIZED;
    this._expr_8 = import1.UNINITIALIZED;
    this._expr_9 = import1.UNINITIALIZED;
    this._expr_10 = import1.UNINITIALIZED;
    this._expr_11 = import1.UNINITIALIZED;
    this._expr_12 = import1.UNINITIALIZED;
    this._expr_13 = import1.UNINITIALIZED;
    this._expr_14 = import1.UNINITIALIZED;
    this._expr_15 = import1.UNINITIALIZED;
    this._expr_16 = import1.UNINITIALIZED;
    this._expr_17 = import1.UNINITIALIZED;
    this._expr_18 = import1.UNINITIALIZED;
    this._expr_19 = import1.UNINITIALIZED;
    this._expr_20 = import1.UNINITIALIZED;
    this._expr_21 = import1.UNINITIALIZED;
  }
  ngOnDetach(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any):void {
  }
  ngOnDestroy():void {
    this.context.ngOnDestroy();
    (this.subscription0 && this.subscription0.unsubscribe());
    (this.subscription1 && this.subscription1.unsubscribe());
    (this.subscription2 && this.subscription2.unsubscribe());
  }
  check_results(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_0,currValue))) {
      this._changed = true;
      this.context.results = currValue;
      this._changes['results'] = new import1.SimpleChange(this._expr_0,currValue);
      this._expr_0 = currValue;
    }
  }
  check_view(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_1,currValue))) {
      this._changed = true;
      this.context.view = currValue;
      this._changes['view'] = new import1.SimpleChange(this._expr_1,currValue);
      this._expr_1 = currValue;
    }
  }
  check_scheme(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_2,currValue))) {
      this._changed = true;
      this.context.scheme = currValue;
      this._changes['scheme'] = new import1.SimpleChange(this._expr_2,currValue);
      this._expr_2 = currValue;
    }
  }
  check_schemeType(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_3,currValue))) {
      this._changed = true;
      this.context.schemeType = currValue;
      this._changes['schemeType'] = new import1.SimpleChange(this._expr_3,currValue);
      this._expr_3 = currValue;
    }
  }
  check_customColors(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_4,currValue))) {
      this._changed = true;
      this.context.customColors = currValue;
      this._changes['customColors'] = new import1.SimpleChange(this._expr_4,currValue);
      this._expr_4 = currValue;
    }
  }
  check_legend(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_5,currValue))) {
      this._changed = true;
      this.context.legend = currValue;
      this._changes['legend'] = new import1.SimpleChange(this._expr_5,currValue);
      this._expr_5 = currValue;
    }
  }
  check_state(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_6,currValue))) {
      this._changed = true;
      this.context.state = currValue;
      this._changes['state'] = new import1.SimpleChange(this._expr_6,currValue);
      this._expr_6 = currValue;
    }
  }
  check_xAxis(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_7,currValue))) {
      this._changed = true;
      this.context.xAxis = currValue;
      this._changes['xAxis'] = new import1.SimpleChange(this._expr_7,currValue);
      this._expr_7 = currValue;
    }
  }
  check_yAxis(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_8,currValue))) {
      this._changed = true;
      this.context.yAxis = currValue;
      this._changes['yAxis'] = new import1.SimpleChange(this._expr_8,currValue);
      this._expr_8 = currValue;
    }
  }
  check_autoScale(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_9,currValue))) {
      this._changed = true;
      this.context.autoScale = currValue;
      this._changes['autoScale'] = new import1.SimpleChange(this._expr_9,currValue);
      this._expr_9 = currValue;
    }
  }
  check_showXAxisLabel(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_10,currValue))) {
      this._changed = true;
      this.context.showXAxisLabel = currValue;
      this._changes['showXAxisLabel'] = new import1.SimpleChange(this._expr_10,currValue);
      this._expr_10 = currValue;
    }
  }
  check_showYAxisLabel(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_11,currValue))) {
      this._changed = true;
      this.context.showYAxisLabel = currValue;
      this._changes['showYAxisLabel'] = new import1.SimpleChange(this._expr_11,currValue);
      this._expr_11 = currValue;
    }
  }
  check_xAxisLabel(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_12,currValue))) {
      this._changed = true;
      this.context.xAxisLabel = currValue;
      this._changes['xAxisLabel'] = new import1.SimpleChange(this._expr_12,currValue);
      this._expr_12 = currValue;
    }
  }
  check_yAxisLabel(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_13,currValue))) {
      this._changed = true;
      this.context.yAxisLabel = currValue;
      this._changes['yAxisLabel'] = new import1.SimpleChange(this._expr_13,currValue);
      this._expr_13 = currValue;
    }
  }
  check_timeline(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_14,currValue))) {
      this._changed = true;
      this.context.timeline = currValue;
      this._changes['timeline'] = new import1.SimpleChange(this._expr_14,currValue);
      this._expr_14 = currValue;
    }
  }
  check_gradient(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_15,currValue))) {
      this._changed = true;
      this.context.gradient = currValue;
      this._changes['gradient'] = new import1.SimpleChange(this._expr_15,currValue);
      this._expr_15 = currValue;
    }
  }
  check_showGridLines(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_16,currValue))) {
      this._changed = true;
      this.context.showGridLines = currValue;
      this._changes['showGridLines'] = new import1.SimpleChange(this._expr_16,currValue);
      this._expr_16 = currValue;
    }
  }
  check_curve(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_17,currValue))) {
      this._changed = true;
      this.context.curve = currValue;
      this._changes['curve'] = new import1.SimpleChange(this._expr_17,currValue);
      this._expr_17 = currValue;
    }
  }
  check_activeEntries(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_18,currValue))) {
      this._changed = true;
      this.context.activeEntries = currValue;
      this._changes['activeEntries'] = new import1.SimpleChange(this._expr_18,currValue);
      this._expr_18 = currValue;
    }
  }
  check_xAxisTickFormatting(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_19,currValue))) {
      this._changed = true;
      this.context.xAxisTickFormatting = currValue;
      this._changes['xAxisTickFormatting'] = new import1.SimpleChange(this._expr_19,currValue);
      this._expr_19 = currValue;
    }
  }
  check_yAxisTickFormatting(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_20,currValue))) {
      this._changed = true;
      this.context.yAxisTickFormatting = currValue;
      this._changes['yAxisTickFormatting'] = new import1.SimpleChange(this._expr_20,currValue);
      this._expr_20 = currValue;
    }
  }
  check_roundDomains(currValue:any,throwOnChange:boolean,forceUpdate:boolean):void {
    if ((forceUpdate || import3.checkBinding(throwOnChange,this._expr_21,currValue))) {
      this._changed = true;
      this.context.roundDomains = currValue;
      this._changes['roundDomains'] = new import1.SimpleChange(this._expr_21,currValue);
      this._expr_21 = currValue;
    }
  }
  ngDoCheck(view:import2.AppView<any>,el:any,throwOnChange:boolean):boolean {
    var changed:any = this._changed;
    this._changed = false;
    if (!throwOnChange) { if (changed) {
      this.context.ngOnChanges(this._changes);
      this._changes = {};
    } }
    return changed;
  }
  checkHost(view:import2.AppView<any>,componentView:import2.AppView<any>,el:any,throwOnChange:boolean):void {
  }
  handleEvent(eventName:string,$event:any):boolean {
    var result:boolean = true;
    if ((eventName == 'mouseleave')) {
      const pd_sub_0:any = ((<any>this.context.hideCircles()) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
  subscribe(view:import2.AppView<any>,_eventHandler:any,emit0:boolean,emit1:boolean,emit2:boolean):void {
    this._eventHandler = _eventHandler;
    if (emit0) { (this.subscription0 = this.context.select.subscribe(_eventHandler.bind(view,'select'))); }
    if (emit1) { (this.subscription1 = this.context.activate.subscribe(_eventHandler.bind(view,'activate'))); }
    if (emit2) { (this.subscription2 = this.context.deactivate.subscribe(_eventHandler.bind(view,'deactivate'))); }
  }
}
var renderType_AreaChartComponent_Host:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,([] as any[]),{});
class View_AreaChartComponent_Host0 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import0.AreaChartComponent>;
  _AreaChartComponent_0_3:Wrapper_AreaChartComponent;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_AreaChartComponent_Host0,renderType_AreaChartComponent_Host,import6.ViewType.HOST,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.selectOrCreateRenderHostElement(this.renderer,'ngx-charts-area-chart',import3.EMPTY_INLINE_ARRAY,rootSelector,(null as any));
    this.compView_0 = new View_AreaChartComponent0(this.viewUtils,this,0,this._el_0);
    this._AreaChartComponent_0_3 = new Wrapper_AreaChartComponent(new import9.ElementRef(this._el_0),this.injectorGet(import10.NgZone,this.parentIndex),this.compView_0.ref,this.injectorGet(import11.Location,this.parentIndex));
    this.compView_0.create(this._AreaChartComponent_0_3.context);
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray2(2,'mouseleave',(null as any)),this.eventHandler(this.handleEvent_0));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [this._el_0]),[disposable_0]);
    return new import8.ComponentRef_<any>(0,this,this._el_0,this._AreaChartComponent_0_3.context);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import0.AreaChartComponent) && (0 === requestNodeIndex))) { return this._AreaChartComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    if (this._AreaChartComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this.compView_0.internalDetectChanges(throwOnChange);
    if (!throwOnChange) { if ((this.numberOfChecks === 0)) { this._AreaChartComponent_0_3.context.ngAfterViewInit(); } }
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._AreaChartComponent_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.compView_0.markPathToRootAsCheckOnce();
    var result:boolean = true;
    result = (this._AreaChartComponent_0_3.handleEvent(eventName,$event) && result);
    return result;
  }
}
export const AreaChartComponentNgFactory:import8.ComponentFactory<import0.AreaChartComponent> = new import8.ComponentFactory<import0.AreaChartComponent>('ngx-charts-area-chart',View_AreaChartComponent_Host0,import0.AreaChartComponent);
const styles_AreaChartComponent:any[] = [import12.styles];
class View_AreaChartComponent1 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import13.XAxisComponent>;
  _XAxisComponent_0_3:import14.Wrapper_XAxisComponent;
  _text_1:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import15.ViewContainer) {
    super(View_AreaChartComponent1,renderType_AreaChartComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),':svg:g',new import3.InlineArray2(2,'ngx-charts-x-axis',''),(null as any));
    this.compView_0 = new import14.View_XAxisComponent0(this.viewUtils,this,0,this._el_0);
    this._XAxisComponent_0_3 = new import14.Wrapper_XAxisComponent();
    this._text_1 = this.renderer.createText((null as any),'\n        ',(null as any));
    this.compView_0.create(this._XAxisComponent_0_3.context);
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray2(2,'dimensionsChanged',(null as any)),this.eventHandler(this.handleEvent_0));
    this._XAxisComponent_0_3.subscribe(this,this.eventHandler(this.handleEvent_0),true);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import13.XAxisComponent) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 1)))) { return this._XAxisComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = this.parentView.context.xScale;
    this._XAxisComponent_0_3.check_xScale(currVal_0_0_0,throwOnChange,false);
    const currVal_0_0_1:any = this.parentView.context.dims;
    this._XAxisComponent_0_3.check_dims(currVal_0_0_1,throwOnChange,false);
    const currVal_0_0_2:any = this.parentView.context.xAxisTickFormatting;
    this._XAxisComponent_0_3.check_tickFormatting(currVal_0_0_2,throwOnChange,false);
    const currVal_0_0_3:any = this.parentView.context.showGridLines;
    this._XAxisComponent_0_3.check_showGridLines(currVal_0_0_3,throwOnChange,false);
    const currVal_0_0_4:any = this.parentView.context.showXAxisLabel;
    this._XAxisComponent_0_3.check_showLabel(currVal_0_0_4,throwOnChange,false);
    const currVal_0_0_5:any = this.parentView.context.xAxisLabel;
    this._XAxisComponent_0_3.check_labelText(currVal_0_0_5,throwOnChange,false);
    if (this._XAxisComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._XAxisComponent_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'dimensionsChanged')) {
      const pd_sub_0:any = ((<any>this.parentView.context.updateXAxisHeight($event)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}
class View_AreaChartComponent2 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import16.YAxisComponent>;
  _YAxisComponent_0_3:import17.Wrapper_YAxisComponent;
  _text_1:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import15.ViewContainer) {
    super(View_AreaChartComponent2,renderType_AreaChartComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),':svg:g',new import3.InlineArray2(2,'ngx-charts-y-axis',''),(null as any));
    this.compView_0 = new import17.View_YAxisComponent0(this.viewUtils,this,0,this._el_0);
    this._YAxisComponent_0_3 = new import17.Wrapper_YAxisComponent();
    this._text_1 = this.renderer.createText((null as any),'\n        ',(null as any));
    this.compView_0.create(this._YAxisComponent_0_3.context);
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray2(2,'dimensionsChanged',(null as any)),this.eventHandler(this.handleEvent_0));
    this._YAxisComponent_0_3.subscribe(this,this.eventHandler(this.handleEvent_0),true);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import16.YAxisComponent) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 1)))) { return this._YAxisComponent_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = this.parentView.context.yScale;
    this._YAxisComponent_0_3.check_yScale(currVal_0_0_0,throwOnChange,false);
    const currVal_0_0_1:any = this.parentView.context.dims;
    this._YAxisComponent_0_3.check_dims(currVal_0_0_1,throwOnChange,false);
    const currVal_0_0_2:any = this.parentView.context.yAxisTickFormatting;
    this._YAxisComponent_0_3.check_tickFormatting(currVal_0_0_2,throwOnChange,false);
    const currVal_0_0_3:any = this.parentView.context.showGridLines;
    this._YAxisComponent_0_3.check_showGridLines(currVal_0_0_3,throwOnChange,false);
    const currVal_0_0_4:any = this.parentView.context.showYAxisLabel;
    this._YAxisComponent_0_3.check_showLabel(currVal_0_0_4,throwOnChange,false);
    const currVal_0_0_5:any = this.parentView.context.yAxisLabel;
    this._YAxisComponent_0_3.check_labelText(currVal_0_0_5,throwOnChange,false);
    if (this._YAxisComponent_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_0.destroy();
    this._YAxisComponent_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'dimensionsChanged')) {
      const pd_sub_0:any = ((<any>this.parentView.context.updateYAxisWidth($event)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}
class View_AreaChartComponent3 extends import2.AppView<any> {
  _el_0:any;
  _text_1:any;
  _el_2:any;
  compView_2:import2.AppView<import18.AreaSeriesComponent>;
  _AreaSeriesComponent_2_3:import19.Wrapper_AreaSeriesComponent;
  _text_3:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import15.ViewContainer) {
    super(View_AreaChartComponent3,renderType_AreaChartComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),':svg:g',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'\n            ',(null as any));
    this._el_2 = import3.createRenderElement(this.renderer,this._el_0,':svg:g',new import3.InlineArray2(2,'ngx-charts-area-series',''),(null as any));
    this.compView_2 = new import19.View_AreaSeriesComponent0(this.viewUtils,this,2,this._el_2);
    this._AreaSeriesComponent_2_3 = new import19.Wrapper_AreaSeriesComponent();
    this.compView_2.create(this._AreaSeriesComponent_2_3.context);
    this._text_3 = this.renderer.createText(this._el_0,'\n          ',(null as any));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import18.AreaSeriesComponent) && (2 === requestNodeIndex))) { return this._AreaSeriesComponent_2_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_2_0_0:any = this.context.$implicit;
    this._AreaSeriesComponent_2_3.check_data(currVal_2_0_0,throwOnChange,false);
    const currVal_2_0_1:any = this.parentView.context.xScale;
    this._AreaSeriesComponent_2_3.check_xScale(currVal_2_0_1,throwOnChange,false);
    const currVal_2_0_2:any = this.parentView.context.yScale;
    this._AreaSeriesComponent_2_3.check_yScale(currVal_2_0_2,throwOnChange,false);
    const currVal_2_0_3:any = this.parentView.context.colors;
    this._AreaSeriesComponent_2_3.check_colors(currVal_2_0_3,throwOnChange,false);
    const currVal_2_0_4:any = this.parentView.context.scaleType;
    this._AreaSeriesComponent_2_3.check_scaleType(currVal_2_0_4,throwOnChange,false);
    const currVal_2_0_5:any = this.parentView.context.gradient;
    this._AreaSeriesComponent_2_3.check_gradient(currVal_2_0_5,throwOnChange,false);
    const currVal_2_0_6:any = this.parentView.context.curve;
    this._AreaSeriesComponent_2_3.check_curve(currVal_2_0_6,throwOnChange,false);
    const currVal_2_0_7:any = this.parentView.context.activeEntries;
    this._AreaSeriesComponent_2_3.check_activeEntries(currVal_2_0_7,throwOnChange,false);
    if (this._AreaSeriesComponent_2_3.ngDoCheck(this,this._el_2,throwOnChange)) { this.compView_2.markAsCheckOnce(); }
    this.compView_2.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_2.destroy();
    this._AreaSeriesComponent_2_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
class View_AreaChartComponent4 extends import2.AppView<any> {
  _el_0:any;
  _text_1:any;
  _el_2:any;
  compView_2:import2.AppView<import20.CircleSeriesComponent>;
  _CircleSeriesComponent_2_3:import21.Wrapper_CircleSeriesComponent;
  _text_3:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import15.ViewContainer) {
    super(View_AreaChartComponent4,renderType_AreaChartComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),':svg:g',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'\n            ',(null as any));
    this._el_2 = import3.createRenderElement(this.renderer,this._el_0,':svg:g',new import3.InlineArray2(2,'ngx-charts-circle-series',''),(null as any));
    this.compView_2 = new import21.View_CircleSeriesComponent0(this.viewUtils,this,2,this._el_2);
    this._CircleSeriesComponent_2_3 = new import21.Wrapper_CircleSeriesComponent(this.parentView.parentView.injectorGet(import11.Location,this.parentView.parentIndex));
    this.compView_2.create(this._CircleSeriesComponent_2_3.context);
    this._text_3 = this.renderer.createText(this._el_0,'\n          ',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_2,new import3.InlineArray8(6,'select',(null as any),'activate',(null as any),'deactivate',(null as any)),this.eventHandler(this.handleEvent_2));
    this._CircleSeriesComponent_2_3.subscribe(this,this.eventHandler(this.handleEvent_2),true,true,true);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import20.CircleSeriesComponent) && (2 === requestNodeIndex))) { return this._CircleSeriesComponent_2_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_2_0_0:any = this.context.$implicit;
    this._CircleSeriesComponent_2_3.check_data(currVal_2_0_0,throwOnChange,false);
    const currVal_2_0_1:any = this.parentView.context.xScale;
    this._CircleSeriesComponent_2_3.check_xScale(currVal_2_0_1,throwOnChange,false);
    const currVal_2_0_2:any = this.parentView.context.yScale;
    this._CircleSeriesComponent_2_3.check_yScale(currVal_2_0_2,throwOnChange,false);
    const currVal_2_0_3:any = this.parentView.context.colors;
    this._CircleSeriesComponent_2_3.check_colors(currVal_2_0_3,throwOnChange,false);
    const currVal_2_0_4:any = this.parentView.context.scaleType;
    this._CircleSeriesComponent_2_3.check_scaleType(currVal_2_0_4,throwOnChange,false);
    const currVal_2_0_5:any = this.parentView.context.hoveredVertical;
    this._CircleSeriesComponent_2_3.check_visibleValue(currVal_2_0_5,throwOnChange,false);
    const currVal_2_0_6:any = this.parentView.context.activeEntries;
    this._CircleSeriesComponent_2_3.check_activeEntries(currVal_2_0_6,throwOnChange,false);
    if (this._CircleSeriesComponent_2_3.ngDoCheck(this,this._el_2,throwOnChange)) { this.compView_2.markAsCheckOnce(); }
    this.compView_2.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_2.destroy();
    this._CircleSeriesComponent_2_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  handleEvent_2(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'select')) {
      const pd_sub_0:any = ((<any>this.parentView.context.onClick($event,this.context.$implicit)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'activate')) {
      const pd_sub_1:any = ((<any>this.parentView.context.onActivate($event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'deactivate')) {
      const pd_sub_2:any = ((<any>this.parentView.context.onDeactivate($event)) !== false);
      result = (pd_sub_2 && result);
    }
    return result;
  }
}
class View_AreaChartComponent6 extends import2.AppView<any> {
  _el_0:any;
  _text_1:any;
  _el_2:any;
  compView_2:import2.AppView<import18.AreaSeriesComponent>;
  _AreaSeriesComponent_2_3:import19.Wrapper_AreaSeriesComponent;
  _text_3:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import15.ViewContainer) {
    super(View_AreaChartComponent6,renderType_AreaChartComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),':svg:g',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_1 = this.renderer.createText(this._el_0,'\n          ',(null as any));
    this._el_2 = import3.createRenderElement(this.renderer,this._el_0,':svg:g',new import3.InlineArray2(2,'ngx-charts-area-series',''),(null as any));
    this.compView_2 = new import19.View_AreaSeriesComponent0(this.viewUtils,this,2,this._el_2);
    this._AreaSeriesComponent_2_3 = new import19.Wrapper_AreaSeriesComponent();
    this.compView_2.create(this._AreaSeriesComponent_2_3.context);
    this._text_3 = this.renderer.createText(this._el_0,'\n        ',(null as any));
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._el_2,
      this._text_3
    ]
    ),(null as any));
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import18.AreaSeriesComponent) && (2 === requestNodeIndex))) { return this._AreaSeriesComponent_2_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_2_0_0:any = this.context.$implicit;
    this._AreaSeriesComponent_2_3.check_data(currVal_2_0_0,throwOnChange,false);
    const currVal_2_0_1:any = this.parentView.parentView.context.timelineXScale;
    this._AreaSeriesComponent_2_3.check_xScale(currVal_2_0_1,throwOnChange,false);
    const currVal_2_0_2:any = this.parentView.parentView.context.timelineYScale;
    this._AreaSeriesComponent_2_3.check_yScale(currVal_2_0_2,throwOnChange,false);
    const currVal_2_0_3:any = this.parentView.parentView.context.colors;
    this._AreaSeriesComponent_2_3.check_colors(currVal_2_0_3,throwOnChange,false);
    const currVal_2_0_4:any = this.parentView.parentView.context.scaleType;
    this._AreaSeriesComponent_2_3.check_scaleType(currVal_2_0_4,throwOnChange,false);
    const currVal_2_0_5:any = this.parentView.parentView.context.gradient;
    this._AreaSeriesComponent_2_3.check_gradient(currVal_2_0_5,throwOnChange,false);
    const currVal_2_0_6:any = this.parentView.parentView.context.curve;
    this._AreaSeriesComponent_2_3.check_curve(currVal_2_0_6,throwOnChange,false);
    if (this._AreaSeriesComponent_2_3.ngDoCheck(this,this._el_2,throwOnChange)) { this.compView_2.markAsCheckOnce(); }
    this.compView_2.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this.compView_2.destroy();
    this._AreaSeriesComponent_2_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
}
class View_AreaChartComponent5 extends import2.AppView<any> {
  _el_0:any;
  compView_0:import2.AppView<import22.Timeline>;
  _Timeline_0_3:import23.Wrapper_Timeline;
  _text_1:any;
  _anchor_2:any;
  /*private*/ _vc_2:import15.ViewContainer;
  _TemplateRef_2_5:any;
  _NgFor_2_6:import24.Wrapper_NgFor;
  _text_3:any;
  /*private*/ _expr_9:any;
  _arr_10:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any,declaredViewContainer:import15.ViewContainer) {
    super(View_AreaChartComponent5,renderType_AreaChartComponent,import6.ViewType.EMBEDDED,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckAlways,declaredViewContainer);
    this._expr_9 = import1.UNINITIALIZED;
    this._arr_10 = import3.pureProxy2((p0:any,p1:any):any[] => {
      return [
        p0,
        p1
      ]
      ;
    });
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    this._el_0 = import3.createRenderElement(this.renderer,(null as any),':svg:g',new import3.InlineArray2(2,'ngx-charts-timeline',''),(null as any));
    this.compView_0 = new import23.View_Timeline0(this.viewUtils,this,0,this._el_0);
    this._Timeline_0_3 = new import23.Wrapper_Timeline(new import9.ElementRef(this._el_0),this.parentView.parentView.injectorGet(import10.NgZone,this.parentView.parentIndex),this.compView_0.ref,this.parentView.parentView.injectorGet(import11.Location,this.parentView.parentIndex));
    this._text_1 = this.renderer.createText((null as any),'\n        ',(null as any));
    this._anchor_2 = this.renderer.createTemplateAnchor((null as any),(null as any));
    this._vc_2 = new import15.ViewContainer(2,0,this,this._anchor_2);
    this._TemplateRef_2_5 = new import25.TemplateRef_(this,2,this._anchor_2);
    this._NgFor_2_6 = new import24.Wrapper_NgFor(this._vc_2.vcRef,this._TemplateRef_2_5,this.parentView.parentView.injectorGet(import26.IterableDiffers,this.parentView.parentIndex),this.parentView.ref);
    this._text_3 = this.renderer.createText((null as any),'\n      ',(null as any));
    this.compView_0.create(this._Timeline_0_3.context);
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_0,new import3.InlineArray2(2,'onDomainChange',(null as any)),this.eventHandler(this.handleEvent_0));
    this._Timeline_0_3.subscribe(this,this.eventHandler(this.handleEvent_0),false,true);
    this.init(this._el_0,((<any>this.renderer).directRenderer? (null as any): [
      this._el_0,
      this._text_1,
      this._anchor_2,
      this._text_3
    ]
    ),[disposable_0]);
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import25.TemplateRef) && (2 === requestNodeIndex))) { return this._TemplateRef_2_5; }
    if (((token === import27.NgFor) && (2 === requestNodeIndex))) { return this._NgFor_2_6.context; }
    if (((token === import22.Timeline) && ((0 <= requestNodeIndex) && (requestNodeIndex <= 3)))) { return this._Timeline_0_3.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_0_0_0:any = this._arr_10(this.parentView.context.timelineWidth,this.parentView.context.height);
    this._Timeline_0_3.check_view(currVal_0_0_0,throwOnChange,false);
    const currVal_0_0_1:any = this.parentView.context.results;
    this._Timeline_0_3.check_results(currVal_0_0_1,throwOnChange,false);
    const currVal_0_0_2:any = this.parentView.context.scheme;
    this._Timeline_0_3.check_scheme(currVal_0_0_2,throwOnChange,false);
    const currVal_0_0_3:any = this.parentView.context.customColors;
    this._Timeline_0_3.check_customColors(currVal_0_0_3,throwOnChange,false);
    const currVal_0_0_4:any = this.parentView.context.legend;
    this._Timeline_0_3.check_legend(currVal_0_0_4,throwOnChange,false);
    const currVal_0_0_5:any = this.parentView.context.scaleType;
    this._Timeline_0_3.check_scaleType(currVal_0_0_5,throwOnChange,false);
    const currVal_0_0_6:any = this.parentView.context.timelineHeight;
    this._Timeline_0_3.check_height(currVal_0_0_6,throwOnChange,false);
    if (this._Timeline_0_3.ngDoCheck(this,this._el_0,throwOnChange)) { this.compView_0.markAsCheckOnce(); }
    const currVal_2_0_0:any = this.parentView.context.results;
    this._NgFor_2_6.check_ngForOf(currVal_2_0_0,throwOnChange,false);
    const currVal_2_0_1:any = this.parentView.context.trackBy;
    this._NgFor_2_6.check_ngForTrackBy(currVal_2_0_1,throwOnChange,false);
    this._NgFor_2_6.ngDoCheck(this,this._anchor_2,throwOnChange);
    this._vc_2.detectChangesInNestedViews(throwOnChange);
    const currVal_9:any = this.parentView.context.timelineTransform;
    if (import3.checkBinding(throwOnChange,this._expr_9,currVal_9)) {
      this.renderer.setElementAttribute(this._el_0,'transform',((currVal_9 == null)? (null as any): currVal_9.toString()));
      this._expr_9 = currVal_9;
    }
    this.compView_0.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this._vc_2.destroyNestedViews();
    this.compView_0.destroy();
    this._Timeline_0_3.ngOnDestroy();
  }
  visitRootNodesInternal(cb:any,ctx:any):void {
    cb(this._el_0,ctx);
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 0) && (ngContentIndex == 0))) {
      cb(this._text_1,ctx);
      cb(this._vc_2.nativeElement,ctx);
      this._vc_2.visitNestedViewRootNodes(cb,ctx);
      cb(this._text_3,ctx);
    }
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 2)) { return new View_AreaChartComponent6(this.viewUtils,this,2,this._anchor_2,this._vc_2); }
    return (null as any);
  }
  handleEvent_0(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'onDomainChange')) {
      const pd_sub_0:any = ((<any>this.parentView.context.updateDomain($event)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}
var renderType_AreaChartComponent:import4.RenderComponentType = import3.createRenderComponentType('',0,import5.ViewEncapsulation.None,styles_AreaChartComponent,{});
export class View_AreaChartComponent0 extends import2.AppView<import0.AreaChartComponent> {
  _text_0:any;
  _el_1:any;
  /*private*/ _vc_1:import15.ViewContainer;
  compView_1:import2.AppView<import28.ChartComponent>;
  _TooltipService_1_5:import29.TooltipService;
  _ChartComponent_1_6:import30.Wrapper_ChartComponent;
  _text_2:any;
  _el_3:any;
  _text_4:any;
  _el_5:any;
  _text_6:any;
  _el_7:any;
  _text_8:any;
  _text_9:any;
  _text_10:any;
  _el_11:any;
  _text_12:any;
  _anchor_13:any;
  /*private*/ _vc_13:import15.ViewContainer;
  _TemplateRef_13_5:any;
  _NgIf_13_6:import31.Wrapper_NgIf;
  _text_14:any;
  _anchor_15:any;
  /*private*/ _vc_15:import15.ViewContainer;
  _TemplateRef_15_5:any;
  _NgIf_15_6:import31.Wrapper_NgIf;
  _text_16:any;
  _el_17:any;
  _text_18:any;
  _anchor_19:any;
  /*private*/ _vc_19:import15.ViewContainer;
  _TemplateRef_19_5:any;
  _NgFor_19_6:import24.Wrapper_NgFor;
  _text_20:any;
  _el_21:any;
  compView_21:import2.AppView<import32.AreaTooltip>;
  _AreaTooltip_21_3:import33.Wrapper_AreaTooltip;
  _text_22:any;
  _anchor_23:any;
  /*private*/ _vc_23:import15.ViewContainer;
  _TemplateRef_23_5:any;
  _NgFor_23_6:import24.Wrapper_NgFor;
  _text_24:any;
  _text_25:any;
  _text_26:any;
  _anchor_27:any;
  /*private*/ _vc_27:import15.ViewContainer;
  _TemplateRef_27_5:any;
  _NgIf_27_6:import31.Wrapper_NgIf;
  _text_28:any;
  _text_29:any;
  _arr_51:any;
  /*private*/ _expr_52:any;
  /*private*/ _expr_53:any;
  /*private*/ _expr_54:any;
  /*private*/ _expr_55:any;
  /*private*/ _expr_56:any;
  /*private*/ _expr_57:any;
  constructor(viewUtils:import3.ViewUtils,parentView:import2.AppView<any>,parentIndex:number,parentElement:any) {
    super(View_AreaChartComponent0,renderType_AreaChartComponent,import6.ViewType.COMPONENT,viewUtils,parentView,parentIndex,parentElement,import7.ChangeDetectorStatus.CheckOnce);
    this._arr_51 = import3.pureProxy2((p0:any,p1:any):any[] => {
      return [
        p0,
        p1
      ]
      ;
    });
    this._expr_52 = import1.UNINITIALIZED;
    this._expr_53 = import1.UNINITIALIZED;
    this._expr_54 = import1.UNINITIALIZED;
    this._expr_55 = import1.UNINITIALIZED;
    this._expr_56 = import1.UNINITIALIZED;
    this._expr_57 = import1.UNINITIALIZED;
  }
  createInternal(rootSelector:string):import8.ComponentRef<any> {
    const parentRenderNode:any = this.renderer.createViewRoot(this.parentElement);
    this._text_0 = this.renderer.createText(parentRenderNode,'\n    ',(null as any));
    this._el_1 = import3.createRenderElement(this.renderer,parentRenderNode,'ngx-charts-chart',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._vc_1 = new import15.ViewContainer(1,(null as any),this,this._el_1);
    this.compView_1 = new import30.View_ChartComponent0(this.viewUtils,this,1,this._el_1);
    this._TooltipService_1_5 = new import29.TooltipService(this.parentView.injectorGet(import34.InjectionService,this.parentIndex));
    this._ChartComponent_1_6 = new import30.Wrapper_ChartComponent(this._vc_1.vcRef,this._TooltipService_1_5);
    this._text_2 = this.renderer.createText((null as any),'\n      ',(null as any));
    this._el_3 = import3.createRenderElement(this.renderer,(null as any),':svg:defs',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_4 = this.renderer.createText(this._el_3,'\n        ',(null as any));
    this._el_5 = import3.createRenderElement(this.renderer,this._el_3,':svg:clipPath',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_6 = this.renderer.createText(this._el_5,'\n          ',(null as any));
    this._el_7 = import3.createRenderElement(this.renderer,this._el_5,':svg:rect',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_8 = this.renderer.createText(this._el_5,'\n        ',(null as any));
    this._text_9 = this.renderer.createText(this._el_3,'\n      ',(null as any));
    this._text_10 = this.renderer.createText((null as any),'\n      ',(null as any));
    this._el_11 = import3.createRenderElement(this.renderer,(null as any),':svg:g',new import3.InlineArray2(2,'class','area-chart chart'),(null as any));
    this._text_12 = this.renderer.createText(this._el_11,'\n        ',(null as any));
    this._anchor_13 = this.renderer.createTemplateAnchor(this._el_11,(null as any));
    this._vc_13 = new import15.ViewContainer(13,11,this,this._anchor_13);
    this._TemplateRef_13_5 = new import25.TemplateRef_(this,13,this._anchor_13);
    this._NgIf_13_6 = new import31.Wrapper_NgIf(this._vc_13.vcRef,this._TemplateRef_13_5);
    this._text_14 = this.renderer.createText(this._el_11,'\n        ',(null as any));
    this._anchor_15 = this.renderer.createTemplateAnchor(this._el_11,(null as any));
    this._vc_15 = new import15.ViewContainer(15,11,this,this._anchor_15);
    this._TemplateRef_15_5 = new import25.TemplateRef_(this,15,this._anchor_15);
    this._NgIf_15_6 = new import31.Wrapper_NgIf(this._vc_15.vcRef,this._TemplateRef_15_5);
    this._text_16 = this.renderer.createText(this._el_11,'\n        ',(null as any));
    this._el_17 = import3.createRenderElement(this.renderer,this._el_11,':svg:g',import3.EMPTY_INLINE_ARRAY,(null as any));
    this._text_18 = this.renderer.createText(this._el_17,'\n          ',(null as any));
    this._anchor_19 = this.renderer.createTemplateAnchor(this._el_17,(null as any));
    this._vc_19 = new import15.ViewContainer(19,17,this,this._anchor_19);
    this._TemplateRef_19_5 = new import25.TemplateRef_(this,19,this._anchor_19);
    this._NgFor_19_6 = new import24.Wrapper_NgFor(this._vc_19.vcRef,this._TemplateRef_19_5,this.parentView.injectorGet(import26.IterableDiffers,this.parentIndex),this.ref);
    this._text_20 = this.renderer.createText(this._el_17,'\n          ',(null as any));
    this._el_21 = import3.createRenderElement(this.renderer,this._el_17,':svg:g',new import3.InlineArray2(2,'ngx-charts-area-tooltip',''),(null as any));
    this.compView_21 = new import33.View_AreaTooltip0(this.viewUtils,this,21,this._el_21);
    this._AreaTooltip_21_3 = new import33.Wrapper_AreaTooltip(this.renderer);
    this.compView_21.create(this._AreaTooltip_21_3.context);
    this._text_22 = this.renderer.createText(this._el_17,'\n          ',(null as any));
    this._anchor_23 = this.renderer.createTemplateAnchor(this._el_17,(null as any));
    this._vc_23 = new import15.ViewContainer(23,17,this,this._anchor_23);
    this._TemplateRef_23_5 = new import25.TemplateRef_(this,23,this._anchor_23);
    this._NgFor_23_6 = new import24.Wrapper_NgFor(this._vc_23.vcRef,this._TemplateRef_23_5,this.parentView.injectorGet(import26.IterableDiffers,this.parentIndex),this.ref);
    this._text_24 = this.renderer.createText(this._el_17,'\n        ',(null as any));
    this._text_25 = this.renderer.createText(this._el_11,'\n      ',(null as any));
    this._text_26 = this.renderer.createText((null as any),'\n      ',(null as any));
    this._anchor_27 = this.renderer.createTemplateAnchor((null as any),(null as any));
    this._vc_27 = new import15.ViewContainer(27,1,this,this._anchor_27);
    this._TemplateRef_27_5 = new import25.TemplateRef_(this,27,this._anchor_27);
    this._NgIf_27_6 = new import31.Wrapper_NgIf(this._vc_27.vcRef,this._TemplateRef_27_5);
    this._text_28 = this.renderer.createText((null as any),'\n    ',(null as any));
    this.compView_1.create(this._ChartComponent_1_6.context);
    this._text_29 = this.renderer.createText(parentRenderNode,'\n  ',(null as any));
    var disposable_0:Function = import3.subscribeToRenderElement(this,this._el_1,new import3.InlineArray8(6,'legendLabelClick',(null as any),'legendLabelActivate',(null as any),'legendLabelDeactivate',(null as any)),this.eventHandler(this.handleEvent_1));
    this._ChartComponent_1_6.subscribe(this,this.eventHandler(this.handleEvent_1),true,true,true);
    var disposable_1:Function = import3.subscribeToRenderElement(this,this._el_21,new import3.InlineArray2(2,'hover',(null as any)),this.eventHandler(this.handleEvent_21));
    this._AreaTooltip_21_3.subscribe(this,this.eventHandler(this.handleEvent_21),true);
    this.init((null as any),((<any>this.renderer).directRenderer? (null as any): [
      this._text_0,
      this._el_1,
      this._text_2,
      this._el_3,
      this._text_4,
      this._el_5,
      this._text_6,
      this._el_7,
      this._text_8,
      this._text_9,
      this._text_10,
      this._el_11,
      this._text_12,
      this._anchor_13,
      this._text_14,
      this._anchor_15,
      this._text_16,
      this._el_17,
      this._text_18,
      this._anchor_19,
      this._text_20,
      this._el_21,
      this._text_22,
      this._anchor_23,
      this._text_24,
      this._text_25,
      this._text_26,
      this._anchor_27,
      this._text_28,
      this._text_29
    ]
    ),[
      disposable_0,
      disposable_1
    ]
    );
    return (null as any);
  }
  injectorGetInternal(token:any,requestNodeIndex:number,notFoundResult:any):any {
    if (((token === import25.TemplateRef) && (13 === requestNodeIndex))) { return this._TemplateRef_13_5; }
    if (((token === import35.NgIf) && (13 === requestNodeIndex))) { return this._NgIf_13_6.context; }
    if (((token === import25.TemplateRef) && (15 === requestNodeIndex))) { return this._TemplateRef_15_5; }
    if (((token === import35.NgIf) && (15 === requestNodeIndex))) { return this._NgIf_15_6.context; }
    if (((token === import25.TemplateRef) && (19 === requestNodeIndex))) { return this._TemplateRef_19_5; }
    if (((token === import27.NgFor) && (19 === requestNodeIndex))) { return this._NgFor_19_6.context; }
    if (((token === import32.AreaTooltip) && (21 === requestNodeIndex))) { return this._AreaTooltip_21_3.context; }
    if (((token === import25.TemplateRef) && (23 === requestNodeIndex))) { return this._TemplateRef_23_5; }
    if (((token === import27.NgFor) && (23 === requestNodeIndex))) { return this._NgFor_23_6.context; }
    if (((token === import25.TemplateRef) && (27 === requestNodeIndex))) { return this._TemplateRef_27_5; }
    if (((token === import35.NgIf) && (27 === requestNodeIndex))) { return this._NgIf_27_6.context; }
    if (((token === import29.TooltipService) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 28)))) { return this._TooltipService_1_5; }
    if (((token === import28.ChartComponent) && ((1 <= requestNodeIndex) && (requestNodeIndex <= 28)))) { return this._ChartComponent_1_6.context; }
    return notFoundResult;
  }
  detectChangesInternal(throwOnChange:boolean):void {
    const currVal_1_0_0:any = this._arr_51(this.context.width,this.context.height);
    this._ChartComponent_1_6.check_view(currVal_1_0_0,throwOnChange,false);
    const currVal_1_0_1:any = this.context.legend;
    this._ChartComponent_1_6.check_showLegend(currVal_1_0_1,throwOnChange,false);
    const currVal_1_0_2:any = this.context.legendOptions;
    this._ChartComponent_1_6.check_legendOptions(currVal_1_0_2,throwOnChange,false);
    const currVal_1_0_3:any = this.context.activeEntries;
    this._ChartComponent_1_6.check_activeEntries(currVal_1_0_3,throwOnChange,false);
    if (this._ChartComponent_1_6.ngDoCheck(this,this._el_1,throwOnChange)) { this.compView_1.markAsCheckOnce(); }
    const currVal_13_0_0:any = this.context.xAxis;
    this._NgIf_13_6.check_ngIf(currVal_13_0_0,throwOnChange,false);
    this._NgIf_13_6.ngDoCheck(this,this._anchor_13,throwOnChange);
    const currVal_15_0_0:any = this.context.yAxis;
    this._NgIf_15_6.check_ngIf(currVal_15_0_0,throwOnChange,false);
    this._NgIf_15_6.ngDoCheck(this,this._anchor_15,throwOnChange);
    const currVal_19_0_0:any = this.context.results;
    this._NgFor_19_6.check_ngForOf(currVal_19_0_0,throwOnChange,false);
    const currVal_19_0_1:any = this.context.trackBy;
    this._NgFor_19_6.check_ngForTrackBy(currVal_19_0_1,throwOnChange,false);
    this._NgFor_19_6.ngDoCheck(this,this._anchor_19,throwOnChange);
    const currVal_21_0_0:any = this.context.xSet;
    this._AreaTooltip_21_3.check_xSet(currVal_21_0_0,throwOnChange,false);
    const currVal_21_0_1:any = this.context.xScale;
    this._AreaTooltip_21_3.check_xScale(currVal_21_0_1,throwOnChange,false);
    const currVal_21_0_2:any = this.context.yScale;
    this._AreaTooltip_21_3.check_yScale(currVal_21_0_2,throwOnChange,false);
    const currVal_21_0_3:any = this.context.results;
    this._AreaTooltip_21_3.check_results(currVal_21_0_3,throwOnChange,false);
    const currVal_21_0_4:any = this.context.dims.height;
    this._AreaTooltip_21_3.check_height(currVal_21_0_4,throwOnChange,false);
    const currVal_21_0_5:any = this.context.colors;
    this._AreaTooltip_21_3.check_colors(currVal_21_0_5,throwOnChange,false);
    if (this._AreaTooltip_21_3.ngDoCheck(this,this._el_21,throwOnChange)) { this.compView_21.markAsCheckOnce(); }
    const currVal_23_0_0:any = this.context.results;
    this._NgFor_23_6.check_ngForOf(currVal_23_0_0,throwOnChange,false);
    this._NgFor_23_6.ngDoCheck(this,this._anchor_23,throwOnChange);
    const currVal_27_0_0:any = (this.context.timeline && (this.context.scaleType === 'time'));
    this._NgIf_27_6.check_ngIf(currVal_27_0_0,throwOnChange,false);
    this._NgIf_27_6.ngDoCheck(this,this._anchor_27,throwOnChange);
    this._vc_1.detectChangesInNestedViews(throwOnChange);
    this._vc_13.detectChangesInNestedViews(throwOnChange);
    this._vc_15.detectChangesInNestedViews(throwOnChange);
    this._vc_19.detectChangesInNestedViews(throwOnChange);
    this._vc_23.detectChangesInNestedViews(throwOnChange);
    this._vc_27.detectChangesInNestedViews(throwOnChange);
    const currVal_52:any = this.context.clipPathId;
    if (import3.checkBinding(throwOnChange,this._expr_52,currVal_52)) {
      this.renderer.setElementAttribute(this._el_5,'id',((currVal_52 == null)? (null as any): currVal_52.toString()));
      this._expr_52 = currVal_52;
    }
    const currVal_53:any = (this.context.dims.width + 10);
    if (import3.checkBinding(throwOnChange,this._expr_53,currVal_53)) {
      this.renderer.setElementAttribute(this._el_7,'width',((currVal_53 == null)? (null as any): currVal_53.toString()));
      this._expr_53 = currVal_53;
    }
    const currVal_54:any = (this.context.dims.height + 10);
    if (import3.checkBinding(throwOnChange,this._expr_54,currVal_54)) {
      this.renderer.setElementAttribute(this._el_7,'height',((currVal_54 == null)? (null as any): currVal_54.toString()));
      this._expr_54 = currVal_54;
    }
    const currVal_55:any = 'translate(-5, -5)';
    if (import3.checkBinding(throwOnChange,this._expr_55,currVal_55)) {
      this.renderer.setElementAttribute(this._el_7,'transform',((currVal_55 == null)? (null as any): currVal_55.toString()));
      this._expr_55 = currVal_55;
    }
    const currVal_56:any = this.context.transform;
    if (import3.checkBinding(throwOnChange,this._expr_56,currVal_56)) {
      this.renderer.setElementAttribute(this._el_11,'transform',((currVal_56 == null)? (null as any): currVal_56.toString()));
      this._expr_56 = currVal_56;
    }
    const currVal_57:any = this.context.clipPath;
    if (import3.checkBinding(throwOnChange,this._expr_57,currVal_57)) {
      this.renderer.setElementAttribute(this._el_17,'clip-path',((currVal_57 == null)? (null as any): currVal_57.toString()));
      this._expr_57 = currVal_57;
    }
    this.compView_1.internalDetectChanges(throwOnChange);
    this.compView_21.internalDetectChanges(throwOnChange);
  }
  destroyInternal():void {
    this._vc_1.destroyNestedViews();
    this._vc_13.destroyNestedViews();
    this._vc_15.destroyNestedViews();
    this._vc_19.destroyNestedViews();
    this._vc_23.destroyNestedViews();
    this._vc_27.destroyNestedViews();
    this.compView_1.destroy();
    this.compView_21.destroy();
    this._AreaTooltip_21_3.ngOnDestroy();
    this._ChartComponent_1_6.ngOnDestroy();
  }
  visitProjectableNodesInternal(nodeIndex:number,ngContentIndex:number,cb:any,ctx:any):void {
    if (((nodeIndex == 1) && (ngContentIndex == 0))) {
      cb(this._text_2,ctx);
      cb(this._el_3,ctx);
      cb(this._text_10,ctx);
      cb(this._el_11,ctx);
      cb(this._text_26,ctx);
      cb(this._vc_27.nativeElement,ctx);
      this._vc_27.visitNestedViewRootNodes(cb,ctx);
      cb(this._text_28,ctx);
    }
  }
  createEmbeddedViewInternal(nodeIndex:number):import2.AppView<any> {
    if ((nodeIndex == 13)) { return new View_AreaChartComponent1(this.viewUtils,this,13,this._anchor_13,this._vc_13); }
    if ((nodeIndex == 15)) { return new View_AreaChartComponent2(this.viewUtils,this,15,this._anchor_15,this._vc_15); }
    if ((nodeIndex == 19)) { return new View_AreaChartComponent3(this.viewUtils,this,19,this._anchor_19,this._vc_19); }
    if ((nodeIndex == 23)) { return new View_AreaChartComponent4(this.viewUtils,this,23,this._anchor_23,this._vc_23); }
    if ((nodeIndex == 27)) { return new View_AreaChartComponent5(this.viewUtils,this,27,this._anchor_27,this._vc_27); }
    return (null as any);
  }
  handleEvent_1(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'legendLabelClick')) {
      const pd_sub_0:any = ((<any>this.context.onClick($event)) !== false);
      result = (pd_sub_0 && result);
    }
    if ((eventName == 'legendLabelActivate')) {
      const pd_sub_1:any = ((<any>this.context.onActivate($event)) !== false);
      result = (pd_sub_1 && result);
    }
    if ((eventName == 'legendLabelDeactivate')) {
      const pd_sub_2:any = ((<any>this.context.onDeactivate($event)) !== false);
      result = (pd_sub_2 && result);
    }
    return result;
  }
  handleEvent_21(eventName:string,$event:any):boolean {
    this.markPathToRootAsCheckOnce();
    var result:boolean = true;
    if ((eventName == 'hover')) {
      const pd_sub_0:any = ((<any>this.context.updateHoveredVertical($event)) !== false);
      result = (pd_sub_0 && result);
    }
    return result;
  }
}